<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jQeury基础</title>
      <link href="/2020/06/22/jquery/"/>
      <url>/2020/06/22/jquery/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p><strong>jquery : Write Less, Do More.</strong></p><h3 id="框架库和jQuery介绍"><a href="#框架库和jQuery介绍" class="headerlink" title="框架库和jQuery介绍"></a>框架库和jQuery介绍</h3><p>​            javaScript框架库: 就是一个普通的js文件, 封装了很多的函数, 封装了很多兼容的代码.</p><p>​            jQuery : 是javaScript框架库中的一种.</p><p>​            好处: 可以解决js兼容问题, 体积小, 链式编程, 隐式迭代, 插件丰富, 开源, 免费. </p><p>​        jQuery文件使用 </p><p>​            引入文件就行了</p><p>​        jQuery中顶级对象</p><p>​            Dom document , Bom window</p><p>​            jQuery 简化写法 $  </p><h3 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h3><pre class=" language-js"><code class="language-js"><span class="token number">1</span>、window<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// js原生的事件</span>    <span class="token comment" spellcheck="true">// 在页面所有资源加载完后执行，如果有多个定义则只执行最后一个 (包括图片/外链等)</span><span class="token punctuation">}</span><span class="token number">2</span><span class="token function">、$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// JQuery的方法</span>    <span class="token comment" spellcheck="true">// 在DOM加载完成时运行的代码，如果有多个定义则依次执行 (不包括图片)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>等同于     <span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 在DOM加载完毕后执行了ready()方法</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 也等同与     <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// $ 是 jQuery 的缩写</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="的常用作用"><a href="#的常用作用" class="headerlink" title="$的常用作用"></a>$的常用作用</h3><ol><li>在页面基本标签加载完成时执行代码</li></ol><pre class=" language-js"><code class="language-js">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>将原生的js对象转换为jQuery对象.</li></ol><pre class=" language-js"><code class="language-js">    <span class="token function">$</span><span class="token punctuation">(</span>原生的js对象<span class="token punctuation">)</span>；  注意<span class="token punctuation">:</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>；</code></pre><p>原生js对象包括 : 内置对象/自定义对象/DOM对象/BOM对象</p><p>注意: 实际处理函数中的this是一个原生js对象, 需要使用$(this)转换为jQuery对象</p><p>jQuery对象[0] 或者 jQuery对象.get(0) 来得到js对象</p><ol start="3"><li>$(‘选择器’)</li></ol><pre class=" language-js"><code class="language-js">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>接收一个html字符串,可以把html字符串转换为jQuery对象</li></ol><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 第一种方式</span>    <span class="token keyword">var</span> linkObj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://www.baidu.com">百度&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加到文档中</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>linkObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 第二种方式</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://www.baidu.com">百度&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="常用的选择器"><a href="#常用的选择器" class="headerlink" title="常用的选择器"></a>常用的选择器</h3><p>基本选择器</p><pre><code>            id选择器 : #box{}            标签选择器 : div{}            类选择器 : .cls{}            并集选择器 : div, p{}            通配符选择器 : *{}</code></pre><p>层级选择器</p><pre><code>            直接子元素 : div p{}            所有子元素 : div&gt;p{}            下一个兄弟元素 : div+p{}            所有的兄弟元素 : div~p{}</code></pre><p>筛选选择器</p><pre><code>            偶数选择器 : #box:even{}            奇数选择器 : #box:odd{}            选择索引为4 : #box&gt;li:eq(4)            选择索引大于4 : #box&gt;li:gt(4)            选择索引小于4 : #box&gt;li:lt(4)筛选状态:            筛选选中的单选 :checked            筛选选中的多选 :selected</code></pre><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><pre class=" language-js"><code class="language-js">HTML代码<span class="token operator">/</span>文本<span class="token operator">/</span>值        <span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  innerHtml        <span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  innerText        <span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  表单元素的value属性一样        <span class="token function">val</span><span class="token punctuation">(</span><span class="token string">'zhi'</span><span class="token punctuation">)</span>  设置zhi        <span class="token comment" spellcheck="true">// 下拉列表框中的val方法的返回值, 如果选中的option有value属性就返回value属性的值, 否则返回option标签中间的内容</span>属性         <span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 prop 的区别 <span class="token punctuation">:</span>    <span class="token function">prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>设置和获取的是dom对象中的原生的属性 <span class="token punctuation">(</span>如className<span class="token punctuation">,</span> checked<span class="token punctuation">)</span>    <span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>设置和获取的是标签中的属性<span class="token punctuation">.</span> <span class="token punctuation">(</span>可以是原生的<span class="token punctuation">,</span> 也可以是自定义的<span class="token punctuation">)</span> 如果获取的属性<span class="token punctuation">,</span> 在标签上没有设置<span class="token punctuation">,</span> 则返回undefined<span class="token punctuation">.</span>    自定义属性<span class="token punctuation">,</span>就用attr<span class="token punctuation">;</span>原生属性<span class="token punctuation">,</span>就用prop<span class="token punctuation">.</span>        <span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'属性'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取该属性的值</span>        <span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'属性'</span><span class="token punctuation">,</span><span class="token string">'属性值'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 设置自定义属性 参数 1属性 2属性值</span>        <span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">'属性'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 移除属性</span>        <span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'属性'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取元素选中状态</span>        <span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">'属性'</span><span class="token punctuation">,</span><span class="token string">'属性值'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 设置元素选中状态</span>        <span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 设置和获取宽</span>        <span class="token function">height</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 设置和获取高</span>        <span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left  <span class="token comment" spellcheck="true">// 获取左偏移</span>        <span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>top  <span class="token comment" spellcheck="true">// 获取右偏移</span>        <span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">{</span>left<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">,</span> top<span class="token punctuation">:</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 设置偏移量</span>        <span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">scrollTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取纵向滚动的距离 --> 数字类型</span>        <span class="token function">scrollLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取横向滚动的距离</span>        <span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'事件 事件'</span><span class="token punctuation">,</span>函数<span class="token punctuation">)</span>         <span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">'要绑定的元素'</span><span class="token punctuation">,</span> <span class="token string">'要绑定的事件的名字'</span><span class="token punctuation">,</span>函数 <span class="token punctuation">)</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取第一个元素</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 获取第一个数组</span>        <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  获取元素下标        <span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  查找x下的所有元素        <span class="token function">children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  直接子元素        <span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  所有的兄弟元素        <span class="token comment" spellcheck="true">// jQuery对象就是一个维数组, 其中存的元素就是js对象, each()遍历方法</span>        <span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  遍历对象        <span class="token comment" spellcheck="true">// index  索引</span>        <span class="token comment" spellcheck="true">// element 当前对象</span></code></pre><p>​            </p><p>设置元素样式</p><pre class=" language-js"><code class="language-js">    <span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">)</span>写法        <span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 获取元素的css的属性值, 字符串类型</span>          <span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'width'</span><span class="token punctuation">:</span><span class="token string">'200px'</span><span class="token punctuation">,</span> <span class="token string">'height'</span><span class="token punctuation">:</span><span class="token string">'200px'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       \<span class="token number">1</span><span class="token punctuation">.</span> 普通            \<span class="token number">2</span><span class="token punctuation">.</span> 链式编程                对象<span class="token punctuation">.</span><span class="token function">方法</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">方法</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">方法</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span><span class="token operator">...</span>                就是方法在执行结束时<span class="token punctuation">,</span> 将调用方法的对象再原样返回                <span class="token punctuation">.</span>end 恢复到断链之前            \<span class="token number">3</span><span class="token punctuation">.</span> 键值对</code></pre><h3 id="操作类样式"><a href="#操作类样式" class="headerlink" title="操作类样式"></a>操作类样式</h3><pre class=" language-js"><code class="language-js">    <span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  获取或设置css的样式<span class="token punctuation">,</span> 用来取代style属性    <span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">'cls cls2'</span><span class="token punctuation">)</span>  添加类样式<span class="token punctuation">,</span> 多个用空格隔开    <span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">'cls'</span><span class="token punctuation">)</span>  移除类样式cls<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>中什么也不写<span class="token punctuation">:</span>移除所有类样式    <span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token string">'cls'</span><span class="token punctuation">)</span>  判断元素是否拥有某个元素<span class="token punctuation">,</span>返回T<span class="token operator">|</span>F    <span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">'cls'</span><span class="token punctuation">)</span> 切换类样式<span class="token punctuation">,</span>没有就添加<span class="token punctuation">,</span>有就移除</code></pre><p>​        </p><h3 id="获得兄弟元素"><a href="#获得兄弟元素" class="headerlink" title="获得兄弟元素"></a>获得兄弟元素</h3><pre class=" language-js"><code class="language-js">    <span class="token function">siblings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> 所有兄弟元素    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> 下一个兄弟元素    <span class="token function">nextAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> 后面的所有兄弟元素    <span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> 前一个兄弟元素    prevAll <span class="token punctuation">:</span> 前面的所有兄弟元素</code></pre><p>​        </p><h3 id="操作动画效果"><a href="#操作动画效果" class="headerlink" title="操作动画效果"></a>操作动画效果</h3><pre class=" language-js"><code class="language-js">    <span class="token function">hide</span><span class="token punctuation">(</span>动画执行时间<span class="token punctuation">,</span> 回调函数<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 隐藏元素 </span>    <span class="token function">show</span><span class="token punctuation">(</span>动画执行时间<span class="token punctuation">,</span> 回调函数<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 显示元素</span>    <span class="token function">sideDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 滑下来</span>    <span class="token function">slideUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 滑上去</span>    <span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 切换滑动状态</span>    <span class="token function">fadeln</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 淡入</span>    <span class="token function">fadeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 淡出</span>    <span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 切换淡入淡出</span>    <span class="token function">fadeTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 透明度变化</span>    <span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>css样式<span class="token punctuation">}</span><span class="token punctuation">,</span> 时间<span class="token punctuation">,</span> 回调函数<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 把元素从当前的css样式, 变换到指定的css样式</span>    <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 用来停止动画,停止当前元素上排队的动画</span>        属性    动画执行的时间 <span class="token punctuation">:</span> 数值类型<span class="token operator">--</span>毫秒值<span class="token punctuation">,</span> 字符串类型 <span class="token punctuation">:</span> <span class="token string">'slow'</span><span class="token operator">--</span>慢  <span class="token string">'normal'</span>正常  <span class="token string">'fast'</span><span class="token operator">--</span>快    匿名函数 <span class="token punctuation">:</span> 在动画执行结束后<span class="token punctuation">,</span> 会自动调用回调函数arguments<span class="token punctuation">.</span>callee 相当于递归</code></pre><h3 id="操作元素-创建-添加…"><a href="#操作元素-创建-添加…" class="headerlink" title="操作元素(创建/添加…)"></a>操作元素(创建/添加…)</h3><h5 id="DOM中创建元素"><a href="#DOM中创建元素" class="headerlink" title="DOM中创建元素"></a>DOM中创建元素</h5><p>​         1.document.write(“标签代码”);缺陷:页面加载后创建元素,把页面中原有的内容全部的干掉</p><p>​         2.innerHTML, 每次设置值, 都会重新渲染页面, 效率比较低; innerHTML添加的元素, 比较难以绑定事件.</p><p>​         3.document.createElement(“标签的名字”), 直接可以获取元素对象, 可以方便的绑定事件.</p><p>​       </p><h5 id="jQuery中创建元素"><a href="#jQuery中创建元素" class="headerlink" title="jQuery中创建元素"></a>jQuery中创建元素</h5><p>​         1.<strong>$(“HTML的字符串”);</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 点击按钮, 创建一个超链接</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 创建了一个jQuery对象</span>      <span class="token keyword">var</span> linkObj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://www.baidu.com">百度&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 添加到文档中  父元素.append(子元素) || 子元素.appendTo(父元素);</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>linkObj<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​         2.<strong>对象.html(“HTML的字符串”);</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 相当于innerHtml</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">'&lt;a href="http://www.baidu.com">百度&lt;/a>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="jQuery中添加元素"><a href="#jQuery中添加元素" class="headerlink" title="jQuery中添加元素"></a>jQuery中添加元素</h5><p>内部插入:</p><p>​    append() : 添加一个子元素, 追加到最后</p><p>​    appendTo()</p><p>​    prepend() : 添加一个子元素, 追加到最前</p><p>​    prependTo()</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// append方法把元素添加到另一个元素中的时候,有剪切的效果</span><span class="token comment" spellcheck="true">// 父元素.append(子元素);</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// appendTo方法 子元素主动添加到父元素中</span><span class="token comment" spellcheck="true">// 子元素.appendTo(父元素);</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>外部插入:</p><p>​    after() : 在每个匹配的元素之后插入内容</p><p>​    insertAfter()</p><p>​    before() : 在每个匹配的元素之前插入内容</p><p>​    insertBefore()</p><h5 id="jQuery中移除元素"><a href="#jQuery中移除元素" class="headerlink" title="jQuery中移除元素"></a>jQuery中移除元素</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 清空div中的内容</span><span class="token comment" spellcheck="true">// 第一种方式 清空 </span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第二种方式 清空</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 低三种方式 移除</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="jQuery中替换元素"><a href="#jQuery中替换元素" class="headerlink" title="jQuery中替换元素"></a>jQuery中替换元素</h5><h5 id="jQuery中克隆元素"><a href="#jQuery中克隆元素" class="headerlink" title="jQuery中克隆元素"></a>jQuery中克隆元素</h5><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 克隆元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#div'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="元素绑定多个事件"><a href="#元素绑定多个事件" class="headerlink" title="元素绑定多个事件"></a>元素绑定多个事件</h3><p>​    原生的js中, 可以为同一个对象添加多个不同的事件, 但不能添加多个同一事件.</p><p>​    jQuery中, 可以为一个独享添加多个同一个事件.</p><h4 id="绑定事件的方法"><a href="#绑定事件的方法" class="headerlink" title="绑定事件的方法"></a>绑定事件的方法</h4><p>​    1.jQuery对象调用事件方法绑定事件</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    2.使用<strong>bind方法</strong>绑定事件</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#btn'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">'事件名称不带on'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    3.使用<strong>delegate方法</strong>绑定事件</p><p>​    父元素给子元素绑定事件</p><p>​    用途 ： 可以为当前不存在的子元素添加事件！</p><pre class=" language-js"><code class="language-js">父元素对象<span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">'子元素'</span><span class="token punctuation">,</span> <span class="token string">'事件名称不带on'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​    委托机制, 利用了事件冒泡(父元素可以接受到子元素发生的事件), 可以再父元素中获得事件对象, 从而判断是哪个子元素 (event.target) 发生了事件.</p><p>​    依赖于两个条件: 1. 冒泡事件 2. 事件对象中的 target 属性</p><p>​    4.使用<strong>on方法</strong>绑定事件 :</p><pre class=" language-js"><code class="language-js">取代bind的用法<span class="token punctuation">:</span>    jQuery对象<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'事件名称不带on'</span><span class="token punctuation">,</span> funciton <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    jQuery对象<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'事件名称不带on'</span><span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'事件2'</span><span class="token punctuation">:</span>处理函数<span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>取代delegate的用法<span class="token punctuation">:</span>    父元素对象<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'事件名称不带on'</span><span class="token punctuation">,</span> <span class="token string">'子元素选择器'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h4 id="解绑事件的方法"><a href="#解绑事件的方法" class="headerlink" title="解绑事件的方法"></a>解绑事件的方法</h4><p>​    1. 使用on绑定的事件</p><pre class=" language-js"><code class="language-js">解除绑定在当前元素上的所有当前事件的处理函数    元素对象<span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"事件名称不带on"</span><span class="token punctuation">)</span>     可以解绑绑定给自己的事件。使用方法名绑定的事件、解除bind绑定的事件、解除使用on第一种方式绑定的事件。     可以解绑当前元素的子元素绑定的事件，通过delegate方法和on的第二种方式给子元素添加的事件，可以被解除</code></pre><p>​    2. 使用bind绑定的事件</p><pre class=" language-js"><code class="language-js">元素对象<span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">"事件名称不带on"</span><span class="token punctuation">)</span></code></pre><p>​    3. 使用delegate绑定的事件</p><pre class=" language-js"><code class="language-js">父元素对象<span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span><span class="token string">"子元素"</span><span class="token punctuation">,</span> <span class="token string">"事件名称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token comment" spellcheck="true">// 情况1</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 无</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 有</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 情况2</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 无</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 无</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>给div绑定<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span>给p绑定<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不可以这么用$("div").off("click")</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unbind</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 不可以这么用$("div").off("click")</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">undelegate</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token string">"click"</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"**"</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"p"</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token string">"**"</span><span class="token punctuation">)</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="事件触发的3种方式"><a href="#事件触发的3种方式" class="headerlink" title="事件触发的3种方式"></a>事件触发的3种方式</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 1.常用方法</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. trigget()方法</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 触发事件  </span><span class="token comment" spellcheck="true">// 3.triggerHandler()方法</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">triggerHandler</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//触发事件</span>区别<span class="token punctuation">:</span>    第一种和第二种触发事件的方式是相同的<span class="token punctuation">,</span><span class="token function">都会触发浏览器默认的事件</span><span class="token punctuation">(</span>光标在文本框中闪烁<span class="token punctuation">)</span>    第三种触发事件的方式不会触发浏览器的默认事件</code></pre><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#dv'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        event<span class="token punctuation">.</span>delegateTarget<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 调用deletage或on方法为子元素绑定事件的那个父元素</span>        event<span class="token punctuation">.</span>currentTarget<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 执行事件的元素</span>        event<span class="token punctuation">.</span>target<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 真正触发事件的元素</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>​    元素中有元素, 这些元素都有相同的事件, 一旦最里面的元素的事件触发了, 外面的所有的元素的相同的事件都会被触发</p><p>​    例 : 元素A中有一个元素B, A和B都有点击事件, B点击事件触发, A点击事件自动触发</p><p>取消事件冒泡</p><p>​    jQuery中  return false</p><p>each()方法</p><p>// jQuery对象就是一个维数组, 其中存的元素就是js对象, each()遍历方法<br>        each(function (index, element){})  遍历对象<br>        // index  索引<br>        // element 当前对象// jQuery对象就是一个维数组, 其中存的元素就是js对象, each()遍历方法<br>        each(function (index, element){})  遍历对象<br>        // index  索引<br>        // element 当前对象</p><h3 id="jQuery插件"><a href="#jQuery插件" class="headerlink" title="jQuery插件"></a>jQuery插件</h3><p>​    就是实现一些功能的封装.</p><p>​    插件 : js代码, css代码, 页面的结构</p><p><strong>封装自己的插件</strong>:</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// changeColor.css</span><span class="token punctuation">.</span>cls<span class="token punctuation">{</span>    width<span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    height<span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>    background<span class="token operator">-</span>color<span class="token punctuation">:</span> pink<span class="token punctuation">;</span>    margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>    margin<span class="token operator">-</span>right<span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    float<span class="token punctuation">:</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// changeColor.js</span><span class="token comment" spellcheck="true">// 固定语法, 为$添加一个方法</span>$<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>changeBackgroundColor <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.cls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'backgroundColor'</span><span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// index</span><span class="token operator">&lt;</span>script<span class="token operator">></span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//点击每个按钮改变每个div的背景颜色</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"input[type=button]"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".cls"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">changeBackgrounColor</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"green"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"red"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"blue"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"dv"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cls"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cls"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cls"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cls"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cls"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token comment" spellcheck="true">// 插件的使用</span>首先引入外部的css文件<span class="token comment" spellcheck="true">//代码如下:</span><span class="token comment" spellcheck="true">// &lt;link rel="stylesheet" href="changeColor.css"></span>请复制下面的js的代码<span class="token comment" spellcheck="true">// &lt;script src="jquery-1.12.2.js">&lt;/script></span>请复制下面的js的代码<span class="token comment" spellcheck="true">// &lt;script src="changeColor.js">&lt;/script></span>请复制下面的代码<span class="token comment" spellcheck="true">// $(function () {</span><span class="token comment" spellcheck="true">//     //点击每个按钮改变每个div的背景颜色</span><span class="token comment" spellcheck="true">//     $("input[type=button]").click(function () {</span><span class="token comment" spellcheck="true">//         $(".cls").changeBackgrounColor($(this).val());</span><span class="token comment" spellcheck="true">//     });</span><span class="token comment" spellcheck="true">// });</span>请复制下面的代码到html中的body标签中<span class="token comment" spellcheck="true">// &lt;input type="button" value="green"/></span><span class="token comment" spellcheck="true">//     &lt;input type="button" value="red"/></span><span class="token comment" spellcheck="true">//     &lt;input type="button" value="blue"/></span><span class="token comment" spellcheck="true">//     &lt;div id="dv"></span><span class="token comment" spellcheck="true">//     &lt;div class="cls">&lt;/div></span><span class="token comment" spellcheck="true">//     &lt;div class="cls">&lt;/div></span><span class="token comment" spellcheck="true">//     &lt;div class="cls">&lt;/div></span><span class="token comment" spellcheck="true">//     &lt;div class="cls">&lt;/div></span><span class="token comment" spellcheck="true">//     &lt;div class="cls">&lt;/div></span><span class="token comment" spellcheck="true">//     &lt;/div></span></code></pre><h3 id="jQueryUI"><a href="#jQueryUI" class="headerlink" title="jQueryUI"></a>jQueryUI</h3><ol><li>引入jQueryUI的样式文件</li><li>引入jQuery文件</li><li>引入jQueryUI的js文件</li><li>使用jQueryUI功能</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 语法 </tag>
            
            <tag> js库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js笔记之基础</title>
      <link href="/2020/06/22/node.xue-xi-bi-ji/"/>
      <url>/2020/06/22/node.xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Node介绍"><a href="#Node介绍" class="headerlink" title="Node介绍"></a>Node介绍</h1><h2 id="为什么要学习Node-js"><a href="#为什么要学习Node-js" class="headerlink" title="为什么要学习Node.js"></a>为什么要学习Node.js</h2><ul><li>企业需求<ul><li>具有服务端开发经验更改</li><li>front-end</li><li>back-end</li><li>全栈开发工程师</li><li>基本的网站开发能力<ul><li>服务端</li><li>前端</li><li>运维部署</li></ul></li><li>多人社区</li></ul></li></ul><h2 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node.js是什么"></a>Node.js是什么</h2><ul><li>Node.js是JavaScript 运行时</li><li>通俗易懂的讲，Node.js是JavaScript的运行平台</li><li>Node.js既不是语言，也不是框架，它是一个平台</li><li>浏览器中的JavaScript<ul><li>EcmaScript<ul><li>基本语法</li><li>if</li><li>var</li><li>function</li><li>Object</li><li>Array</li></ul></li><li>Bom</li><li>Dom</li></ul></li><li>Node.js中的JavaScript<ul><li>没有Bom，Dom</li><li>EcmaScript</li><li>在Node中这个JavaScript执行环境为JavaScript提供了一些服务器级别的API<ul><li>例如文件的读写</li><li>网络服务的构建</li><li>网络通信</li><li>http服务器</li></ul></li></ul></li><li>构建与Chrome的V8引擎之上<ul><li>代码只是具有特定格式的字符串</li><li>引擎可以认识它，帮你解析和执行</li><li>Google Chrome的V8引擎是目前公认的解析执行JavaScript代码最快的</li><li>Node.js的作者把Google Chrome中的V8引擎移植出来，开发了一个独立的JavaScript运行时环境</li></ul></li><li>Node.js uses an envent-driven,non-blocking I/O mode that makes it lightweight and efficent.<ul><li>envent-driven    事件驱动</li><li>non-blocking I/O mode   非阻塞I/O模型（异步）</li><li>ightweight and efficent.   轻量和高效</li></ul></li><li>Node.js package ecosystem,npm,is the larget scosystem of open sourcr libraries in the world<ul><li>npm 是世界上最大的开源生态系统</li><li>绝大多数JavaScript相关的包都存放在npm上，这样做的目的是为了让开发人员更方便的去下载使用</li><li>npm install jquery</li></ul></li></ul><h2 id="Node能做什么"><a href="#Node能做什么" class="headerlink" title="Node能做什么"></a>Node能做什么</h2><ul><li>web服务器后台</li><li>命令行工具<ul><li>npm(node)</li><li>git(c语言)</li><li>hexo（node）</li><li>…</li></ul></li><li>对于前端工程师来讲，接触最多的是它的命令行工具<ul><li>自己写的很少，主要是用别人第三方的</li><li>webpack</li><li>gulp</li><li>npm</li></ul></li></ul><h1 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h1><h2 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h2><ul><li>查看Node环境的版本号</li><li>下载：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></li><li>安装：<ul><li>傻瓜式安装，一路<code>next</code></li><li>安装过再次安装会升级</li></ul></li><li>确认Node环境是否安装成功<ul><li>查看node的版本号：<code>node --version</code></li><li>或者<code>node -v</code></li></ul></li><li>配置环境变量</li></ul><h2 id="解析执行JavaScript"><a href="#解析执行JavaScript" class="headerlink" title="解析执行JavaScript"></a>解析执行JavaScript</h2><ol><li>创建编写JavaScript脚本文件</li><li>打开终端，定位脚本文件的所属目录</li><li>输入<code>node  文件名</code>执行对应的文件</li></ol><p>注意：文件名不要用<code>node.js</code>来命名，也就是说除了<code>node</code>这个名字随便起，最好不要使用中文。</p><h2 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h2><p>文件读取:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//浏览器中的JavaScript是没有文件操作能力的</span><span class="token comment" spellcheck="true">//但是Node中的JavaScript具有文件操作能力</span><span class="token comment" spellcheck="true">//fs是file-system的简写，就是文件系统的意思</span><span class="token comment" spellcheck="true">//在Node中如果想要进行文件的操作就必须引用fs这个核心模块</span><span class="token comment" spellcheck="true">//在fs这个和兴模块中，就提供了人所有文件操作相关的API</span><span class="token comment" spellcheck="true">//例如 fs.readFile就是用来读取文件的</span><span class="token comment" spellcheck="true">//  1.使用fs核心模块</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.读取文件</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件读取失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>文件写入：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//  1.使用fs核心模块</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.将数据写入文件</span>fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.txt'</span><span class="token punctuation">,</span><span class="token string">'我是文件写入的信息'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'文件写入失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>服务器：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.加载http核心模块</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.使用http.createServer()创建一个web服务器</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.服务器要做的事儿</span><span class="token comment" spellcheck="true">// 提供服务：对数据服务</span><span class="token comment" spellcheck="true">// 发请求</span><span class="token comment" spellcheck="true">//    接收请求</span><span class="token comment" spellcheck="true">//    处理请求</span><span class="token comment" spellcheck="true">//    反馈（发送响应）</span><span class="token comment" spellcheck="true">//    当客户端请求过来，就会自动触发服务器的request请求事件，然后执行第二个参数：回调处理函数</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'收到客户的请求了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 4.绑定端口号，启动服务</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'runing...'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h1 id="Node中的模块系统"><a href="#Node中的模块系统" class="headerlink" title="Node中的模块系统"></a>Node中的模块系统</h1><p>使用Node编写应用程序主要就是在使用：</p><ul><li><p>EcmaScript语言</p><ul><li>和浏览器一样，在Node中没有Bom和Dom</li></ul></li><li><p>核心模块</p><ul><li>文件操作的fs</li><li>http服务操作的http</li><li>url路径操作模块</li><li>path路径处理模块</li><li>os操作系统信息</li></ul></li><li><p>第三方模块</p><ul><li>art-template</li><li>必须通过npm来下载才可以使用</li></ul></li><li><p>自己写的模块</p><ul><li>自己创建的文件</li></ul></li></ul><h2 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h2><ul><li>文件作用域(模块是独立的，在不同的文件使用必须要重新引用)【在node中没有全局作用域，它是文件模块作用域】</li><li>通信规则<ul><li>加载require</li><li>导出exports</li></ul></li></ul><h2 id="CommonJS模块规范"><a href="#CommonJS模块规范" class="headerlink" title="CommonJS模块规范"></a>CommonJS模块规范</h2><p>在Node中的JavaScript还有一个重要的概念，模块系统。</p><ul><li><p>模块作用域</p></li><li><p>使用require方法来加载模块</p></li><li><p>使用exports接口对象来导出模板中的成员</p><h3 id="加载require"><a href="#加载require" class="headerlink" title="加载require"></a>加载<code>require</code></h3><p>语法：</p><pre class=" language-java"><code class="language-java">var 自定义变量名 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'模块'</span><span class="token punctuation">)</span></code></pre><p>作用：</p><ul><li>执行被加载模块中的代码</li><li>得到被加载模块中的<code>exports</code>导出接口对象</li></ul><h3 id="导出exports"><a href="#导出exports" class="headerlink" title="导出exports"></a>导出<code>exports</code></h3><ul><li><p>Node中是模块作用域，默认文件中所有的成员只在当前模块有效</p></li><li><p>对于希望可以被其他模块访问到的成员，我们需要把这些公开的成员都挂载到<code>exports</code>接口对象中就可以了</p><p>导出多个成员（必须在对象中）：</p><pre class=" language-javascript"><code class="language-javascript">exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bbb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span><span class="token string">"bar"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>exports<span class="token punctuation">.</span>d <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><pre><code>导出单个成员（拿到的就是函数，字符串）：```javascriptmodule.exports = &#39;hello&#39;;```以下情况会覆盖：```javascriptmodule.exports = &#39;hello&#39;;//后者会覆盖前者module.exports = function add(x,y) {    return x+y;}```也可以通过以下方法来导出多个成员：```javascriptmodule.exports = {    foo = &#39;hello&#39;,    add:function(){        return x+y;    }};```</code></pre><h2 id="模块原理"><a href="#模块原理" class="headerlink" title="模块原理"></a>模块原理</h2><p>exports和<code>module.exports</code>的一个引用：</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>exports <span class="token operator">===</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//true</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//等价于</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span></code></pre><p><code>当给exports重新赋值后，exports！= module.exports.</code></p><p><code>最终return的是module.exports,无论exports中的成员是什么都没用。</code></p><pre class=" language-javascript"><code class="language-javascript">真正去使用的时候：    导出单个成员：exports<span class="token punctuation">.</span>xxx <span class="token operator">=</span> xxx<span class="token punctuation">;</span>    导出多个成员：module<span class="token punctuation">.</span>exports 或者 modeule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引用服务</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引用模板</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建服务</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 公共路径</span><span class="token keyword">var</span> wwwDir <span class="token operator">=</span> <span class="token string">'D:/app/www'</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span>url<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 读取文件</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./template-apche.html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'404 Not Found'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>wwwDir<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'Can not find www Dir.'</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 使用模板引擎解析替换data中的模板字符串</span>            <span class="token comment" spellcheck="true">// 去xmpTempleteList.html中编写模板语法</span>            <span class="token keyword">var</span> htmlStr <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>                 title<span class="token punctuation">:</span> <span class="token string">'D:/app/www/ 的索引'</span><span class="token punctuation">,</span>                files<span class="token punctuation">:</span>files             <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 发送响应数据</span>            res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>htmlStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'running....'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span>jQuery中的each 和 原生JavaScript方法forEach的区别：    提供源头：        原生js是es5提供的（不兼容IE8）<span class="token punctuation">,</span>        jQuery的each是jQuery第三方库提供的（如果要使用需要用<span class="token number">2</span>以下的版本也就是<span class="token number">1</span><span class="token punctuation">.</span>版本）<span class="token punctuation">,</span>它的each方法主要用来遍历jQuery实例对象（伪数组）<span class="token punctuation">,</span>同时也可以做低版本forEach的替代品<span class="token punctuation">,</span>jQuery的实例对象不能使用forEach方法，如果想要使用必须转为数组（<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>jQuery实例对象<span class="token punctuation">)</span>）才能使用<span class="token number">2</span><span class="token punctuation">.</span>模块中导出多个成员和导出单个成员<span class="token number">3.301</span>和<span class="token number">302</span>的区别：    <span class="token number">301</span>永久重定向<span class="token punctuation">,</span>浏览器会记住    <span class="token number">302</span>临时重定向<span class="token number">4</span><span class="token punctuation">.</span>exports和module<span class="token punctuation">.</span>exports的区别<span class="token punctuation">:</span>    每个模块中都有一个module对象    module对象中有一个exports对象    我们可以把需要导出的成员都挂载到module<span class="token punctuation">.</span>exports接口对象中    也就是<span class="token template-string"><span class="token string">`module.exports.xxx = xxx`</span></span>的方式    但是每次写太多了就很麻烦，所以Node为了简化代码，就在每一个模块中都提供了一个成员叫<span class="token template-string"><span class="token string">`exports`</span></span>    <span class="token template-string"><span class="token string">`exports === module.exports`</span></span>结果为<span class="token boolean">true</span><span class="token punctuation">,</span>所以完全可以<span class="token template-string"><span class="token string">`exports.xxx = xxx`</span></span>    当一个模块需要导出单个成员的时候必须使用<span class="token template-string"><span class="token string">`module.exports = xxx`</span></span>的方式，<span class="token operator">=</span><span class="token punctuation">,</span>使用<span class="token template-string"><span class="token string">`exports = xxx`</span></span>不管用<span class="token punctuation">,</span>因为每个模块最终<span class="token keyword">return</span>的是module<span class="token punctuation">.</span>exports<span class="token punctuation">,</span>而exports只是module<span class="token punctuation">.</span>exports的一个引用<span class="token punctuation">,</span>所以<span class="token template-string"><span class="token string">`exports`</span></span>即使重新赋值<span class="token punctuation">,</span>也不会影响<span class="token template-string"><span class="token string">`module.exports`</span></span>。    有一种赋值方式比较特殊：<span class="token template-string"><span class="token string">`exports = module.exports`</span></span>这个用来新建立引用关系的。</code></pre><h1 id="require的加载规则"><a href="#require的加载规则" class="headerlink" title="require的加载规则"></a>require的加载规则</h1><ul><li><p>核心模块</p><ul><li>模块名</li></ul></li><li><p>第三方模块</p><ul><li>模块名</li></ul></li><li><p>用户自己写的</p><ul><li>路径</li></ul></li></ul><h2 id="require的加载规则："><a href="#require的加载规则：" class="headerlink" title="require的加载规则："></a>require的加载规则：</h2><ul><li><p>优先从缓存加载</p></li><li><p>判断模块标识符</p><ul><li>核心模块</li><li>自己写的模块（路径形式的模块）</li><li>第三方模块（node_modules）<ul><li>第三方模块的标识就是第三方模块的名称（不可能有第三方模块和核心模块的名字一致）</li><li>npm<ul><li>开发人员可以把写好的框架库发布到npm上</li><li>使用者通过npm命令来下载</li></ul></li><li>使用方式：<code>var 名称 = require(&#39;npm install【下载包】 的包名&#39;)</code><ul><li>node_modules/express/package.json main</li><li>如果package.json或者main不成立，则查找被选择项：index.js</li><li>如果以上条件都不满足，则继续进入上一级目录中的node_modules按照上面的规则依次查找，直到当前文件所属此盘根目录都找不到最后报错</li></ul></li></ul></li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 如果非路径形式的标识</span><span class="token comment" spellcheck="true">// 路径形式的标识：</span>    <span class="token comment" spellcheck="true">// ./  当前目录 不可省略</span>    <span class="token comment" spellcheck="true">// ../  上一级目录  不可省略</span>    <span class="token comment" spellcheck="true">//  /xxx也就是D:/xxx</span>    <span class="token comment" spellcheck="true">// 带有绝对路径几乎不用（D:/a/foo.js）</span><span class="token comment" spellcheck="true">// 首位表示的是当前文件模块所属磁盘根目录</span><span class="token comment" spellcheck="true">// require('./a'); </span><span class="token comment" spellcheck="true">// 核心模块</span><span class="token comment" spellcheck="true">// 核心模块本质也是文件，核心模块文件已经被编译到了二进制文件中了，我们只需要按照名字来加载就可以了</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 第三方模块</span><span class="token comment" spellcheck="true">// 凡是第三方模块都必须通过npm下载（npm i node_modules），使用的时候就可以通过require('包名')来加载才可以使用</span><span class="token comment" spellcheck="true">// 第三方包的名字不可能和核心模块的名字是一样的</span><span class="token comment" spellcheck="true">// 既不是核心模块，也不是路径形式的模块</span><span class="token comment" spellcheck="true">//      先找到当前文所述目录的node_modules</span><span class="token comment" spellcheck="true">//      然后找node_modules/art-template目录</span><span class="token comment" spellcheck="true">//      node_modules/art-template/package.json</span><span class="token comment" spellcheck="true">//      node_modules/art-template/package.json中的main属性</span><span class="token comment" spellcheck="true">//      main属性记录了art-template的入口模块</span><span class="token comment" spellcheck="true">//      然后加载使用这个第三方包</span><span class="token comment" spellcheck="true">//      实际上最终加载的还是文件</span><span class="token comment" spellcheck="true">//      如果package.json不存在或者mian指定的入口模块不存在</span><span class="token comment" spellcheck="true">//      则node会自动找该目录下的index.js</span><span class="token comment" spellcheck="true">//      也就是说index.js是一个备选项，如果main没有指定，则加载index.js文件</span><span class="token comment" spellcheck="true">//      </span>        <span class="token comment" spellcheck="true">// 如果条件都不满足则会进入上一级目录进行查找</span><span class="token comment" spellcheck="true">// 注意：一个项目只有一个node_modules，放在项目根目录中，子目录可以直接调用根目录的文件</span><span class="token keyword">var</span> template <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'art-template'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="模块标识符中的-和文件操作路径中的"><a href="#模块标识符中的-和文件操作路径中的" class="headerlink" title="模块标识符中的/和文件操作路径中的/"></a>模块标识符中的<code>/</code>和文件操作路径中的<code>/</code></h2><p>文件操作路径：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 咱们所使用的所有文件操作的API都是异步的</span><span class="token comment" spellcheck="true">// 就像ajax请求一样</span><span class="token comment" spellcheck="true">// 读取文件</span><span class="token comment" spellcheck="true">// 文件操作中 ./ 相当于当前模块所处磁盘根目录</span><span class="token comment" spellcheck="true">// ./index.txt    相对于当前目录</span><span class="token comment" spellcheck="true">// /index.txt    相对于当前目录</span><span class="token comment" spellcheck="true">// /index.txt   绝对路径,当前文件模块所处根目录</span><span class="token comment" spellcheck="true">// d:express/index.txt   绝对路径</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./index.txt'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>模块操作路径：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 在模块加载中，相对路径中的./不能省略</span><span class="token comment" spellcheck="true">// 这里省略了.也是磁盘根目录</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./index'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span></code></pre><h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><ul><li>node package manage(node包管理器)</li><li>通过npm命令安装jQuery包（npm install –save jquery），在安装时加上–save会主动生成说明书文件信息（将安装文件的信息添加到package.json里面）</li></ul><h3 id="npm网站"><a href="#npm网站" class="headerlink" title="npm网站"></a>npm网站</h3><blockquote><p>​    npmjs.com    网站   是用来搜索npm包的</p></blockquote><h3 id="npm命令行工具"><a href="#npm命令行工具" class="headerlink" title="npm命令行工具"></a>npm命令行工具</h3><p>npm是一个命令行工具，只要安装了node就已经安装了npm。</p><p>npm也有版本概念，可以通过<code>npm --version</code>来查看npm的版本</p><p>升级npm(自己升级自己)：</p><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">--</span>global npm</code></pre><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>npm init(生成package.json说明书文件)<ul><li>npm init -y(可以跳过向导，快速生成)</li></ul></li><li>npm install<ul><li>一次性把dependencies选项中的依赖项全部安装</li><li>简写（npm i）</li></ul></li><li>npm install 包名<ul><li>只下载</li><li>简写（npm i 包名）</li></ul></li><li>npm install –save 包名<ul><li>下载并且保存依赖项（package.json文件中的dependencies选项）</li><li>简写（npm i  包名）</li></ul></li><li>npm uninstall 包名<ul><li>只删除，如果有依赖项会依然保存</li><li>简写（npm un 包名）</li></ul></li><li>npm uninstall –save 包名<ul><li>删除的同时也会把依赖信息全部删除</li><li>简写（npm un 包名）</li></ul></li><li>npm help<ul><li>查看使用帮助</li></ul></li><li>npm 命令 –help<ul><li>查看具体命令的使用帮助（npm uninstall –help）</li></ul></li></ul><h3 id="解决npm被墙问题"><a href="#解决npm被墙问题" class="headerlink" title="解决npm被墙问题"></a>解决npm被墙问题</h3><p>npm存储包文件的服务器在国外，有时候会被墙，速度很慢，所以需要解决这个问题。</p><blockquote><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。" target="_blank" rel="noopener">https://developer.aliyun.com/mirror/NPM?from=tnpm淘宝的开发团队把npm在国内做了一个镜像（也就是一个备份）。</a></p></blockquote><p>安装淘宝的cnpm：</p><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">-</span>g cnpm <span class="token operator">--</span>registry<span class="token operator">=</span>https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org<span class="token punctuation">;</span></code></pre><pre class=" language-shell"><code class="language-shell">#在任意目录执行都可以#--global表示安装到全局，而非当前目录#--global不能省略，否则不管用npm install --global cnpm</code></pre><p>安装包的时候把以前的<code>npm</code>替换成<code>cnpm</code>。</p><pre class=" language-shell"><code class="language-shell">#走国外的npm服务器下载jQuery包，速度比较慢npm install jQuery;#使用cnpm就会通过淘宝的服务器来下载jQuerycnpm install jQuery;</code></pre><p>如果不想安装<code>cnpm</code>又想使用淘宝的服务器来下载：</p><pre class=" language-shell"><code class="language-shell">npm install jquery --registry=https://npm.taobao.org;</code></pre><p>但是每次手动加参数就很麻烦，所以我们可以把这个选项加入到配置文件中：</p><pre class=" language-shell"><code class="language-shell">npm config set registry https://npm.taobao.org;#查看npm配置信息npm config list;</code></pre><p>只要经过上面的配置命令，则以后所有的<code>npm install</code>都会通过淘宝的服务器来下载</p><h1 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h1><p>每一个项目都要有一个<code>package.json</code>文件（包描述文件，就像产品的说明书一样）</p><p>这个文件可以通过<code>npm init</code>自动初始化出来</p><pre class=" language-javascript"><code class="language-javascript">D<span class="token punctuation">:</span>\code\node中的模块系统<span class="token operator">></span>npm initThis utility will walk you through creating a <span class="token keyword">package</span><span class="token punctuation">.</span>json file<span class="token punctuation">.</span>It only covers the most common items<span class="token punctuation">,</span> and tries to guess sensible defaults<span class="token punctuation">.</span>See <span class="token template-string"><span class="token string">`npm help json`</span></span> <span class="token keyword">for</span> definitive documentation on these fieldsand exactly what they <span class="token keyword">do</span><span class="token punctuation">.</span>Use <span class="token template-string"><span class="token string">`npm install &lt;pkg>`</span></span> afterwards to install a <span class="token keyword">package</span> andsave it <span class="token keyword">as</span> a dependency <span class="token keyword">in</span> the <span class="token keyword">package</span><span class="token punctuation">.</span>json file<span class="token punctuation">.</span>Press <span class="token operator">^</span>C at any time to quit<span class="token punctuation">.</span><span class="token keyword">package</span> name<span class="token punctuation">:</span> <span class="token punctuation">(</span>node中的模块系统<span class="token punctuation">)</span>Sorry<span class="token punctuation">,</span> name can only contain URL<span class="token operator">-</span>friendly characters<span class="token punctuation">.</span><span class="token keyword">package</span> name<span class="token punctuation">:</span> <span class="token punctuation">(</span>node中的模块系统<span class="token punctuation">)</span> clsversion<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">)</span>description<span class="token punctuation">:</span> 这是一个测试项目entry point<span class="token punctuation">:</span> <span class="token punctuation">(</span>main<span class="token punctuation">.</span>js<span class="token punctuation">)</span>test command<span class="token punctuation">:</span>git repository<span class="token punctuation">:</span>keywords<span class="token punctuation">:</span>author<span class="token punctuation">:</span> xiaochenlicense<span class="token punctuation">:</span> <span class="token punctuation">(</span>ISC<span class="token punctuation">)</span>About to write to D<span class="token punctuation">:</span>\code\node中的模块系统\<span class="token keyword">package</span><span class="token punctuation">.</span>json<span class="token punctuation">:</span><span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"cls"</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token punctuation">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token string">"description"</span><span class="token punctuation">:</span> <span class="token string">"这是一个测试项目"</span><span class="token punctuation">,</span>  <span class="token string">"main"</span><span class="token punctuation">:</span> <span class="token string">"main.js"</span><span class="token punctuation">,</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"author"</span><span class="token punctuation">:</span> <span class="token string">"xiaochen"</span><span class="token punctuation">,</span>  <span class="token string">"license"</span><span class="token punctuation">:</span> <span class="token string">"ISC"</span><span class="token punctuation">}</span>Is <span class="token keyword">this</span> OK<span class="token operator">?</span> <span class="token punctuation">(</span>yes<span class="token punctuation">)</span> yes</code></pre><p>对于目前来讲，最有用的是<code>dependencies</code>选项，可以用来帮助我们保存第三方包的依赖信息。</p><p>如果<code>node_modules</code>删除了也不用担心，只需要在控制面板中<code>npm install</code>就会自动把<code>package.json</code>中的<code>dependencies</code>中所有的依赖项全部都下载回来。</p><ul><li>建议每个项目的根目录下都有一个<code>package.json</code>文件</li><li>建议执行<code>npm install 包名</code>的时候都加上<code>--save</code>选项，目的是用来保存依赖信息</li></ul><h2 id="package-json和package-lock-json"><a href="#package-json和package-lock-json" class="headerlink" title="package.json和package-lock.json"></a>package.json和package-lock.json</h2><p>npm 5以前是不会有<code>package-lock.json</code>这个文件</p><p>npm5以后才加入这个文件</p><p>当你安装包的时候，npm都会生成或者更新<code>package-lock.json</code>这个文件</p><ul><li>npm5以后的版本安装都不要加<code>--save</code>参数，它会自动保存依赖信息</li><li>当你安装包的时候，会自动创建或者更新<code>package-lock.json</code>文件</li><li><code>package-lock.json</code>这个文件会包含<code>node_modules</code>中所有包的信息（版本，下载地址。。。）<ul><li>这样的话重新<code>npm install</code>的时候速度就可以提升</li></ul></li><li>从文件来看，有一个<code>lock</code>称之为锁<ul><li>这个<code>lock</code>使用来锁版本的</li><li>如果项目依赖了<code>1.1.1</code>版本</li><li>如果你重新install其实会下载最细版本，而不是<code>1.1.1</code></li><li><code>package-lock.json</code>的另外一个作用就是锁定版本号，防止自动升级</li></ul></li></ul><h2 id="path路径操作模块"><a href="#path路径操作模块" class="headerlink" title="path路径操作模块"></a>path路径操作模块</h2><blockquote><p>参考文档：<a href="https://nodejs.org/docs/latest-v13.x/api/path.html" target="_blank" rel="noopener">https://nodejs.org/docs/latest-v13.x/api/path.html</a></p></blockquote><ul><li>path.basename：获取路径的文件名，默认包含扩展名</li><li>path.dirname：获取路径中的目录部分</li><li>path.extname：获取一个路径中的扩展名部分</li><li>path.parse：把路径转换为对象<ul><li>root：根路径</li><li>dir：目录</li><li>base：包含后缀名的文件名</li><li>ext：后缀名</li><li>name：不包含后缀名的文件名</li></ul></li><li>path.join：拼接路径</li><li>path.isAbsolute：判断一个路径是否为绝对路径<h1 id="Node中的其它成员-dirname-filename"><a href="#Node中的其它成员-dirname-filename" class="headerlink" title="Node中的其它成员(dirname,filename)"></a>Node中的其它成员(<strong>dirname,</strong>filename)</h1></li></ul><p>在每个模块中，除了<code>require</code>,<code>exports</code>等模块相关的API之外，还有两个特殊的成员：</p><ul><li><p><code>__dirname</code>，是一个成员，可以用来<strong>动态</strong>获取当前文件模块所属目录的绝对路径</p></li><li><p><code>__filename</code>，可以用来<strong>动态</strong>获取当前文件的绝对路径（包含文件名）</p></li><li><p><code>__dirname</code>和<code>filename</code>是不受执行node命令所属路径影响的</p></li></ul><p>在文件操作中，使用相对路径是不可靠的，因为node中文件操作的路径被设计为相对于执行node命令所处的路径。</p><p>所以为了解决这个问题，只需要把相对路径变为绝对路径（绝对路径不受任何影响）就可以了。</p><p>就可以使用<code>__dirname</code>或者<code>__filename</code>来帮助我们解决这个问题</p><p>在拼接路径的过程中，为了避免手动拼接带来的一些低级错误，推荐使用<code>path.join()</code>来辅助拼接</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// console.log(__dirname + 'a.txt');</span><span class="token comment" spellcheck="true">// path.join方法会将文件操作中的相对路径都统一的转为动态的绝对路径</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/a.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> err    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>补充：模块中的路径标识和这里的路径没关系，不受影响（就是相对于文件模块）</p></blockquote><blockquote><p><strong>注意：</strong></p><p><strong>模块中的路径标识和文件操作中的相对路径标识不一致</strong></p><p><strong>模块中的路径标识就是相对于当前文件模块，不受node命令所处路径影响</strong></p></blockquote><h1 id="Express（快速的）"><a href="#Express（快速的）" class="headerlink" title="Express（快速的）"></a>Express（快速的）</h1><p>作者：Tj</p><p>原生的http在某些方面表现不足以应对我们的开发需求，所以就需要使用框架来加快我们的开发效率，框架的目的就是提高效率，让我们的代码高度统一。</p><p>在node中有很多web开发框架。主要学习express</p><ul><li><p><code>http://expressjs.com/</code>,其中主要封装的是http。</p></li><li><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1 安装</span><span class="token comment" spellcheck="true">// 2 引包</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3 创建服务器应用程序</span><span class="token comment" spellcheck="true">//      也就是原来的http.createServer();</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 公开指定目录</span><span class="token comment" spellcheck="true">// 只要通过这样做了，就可以通过/public/xx的方式来访问public目录中的所有资源</span><span class="token comment" spellcheck="true">// 在Express中开放资源就是一个API的事</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public/'</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'/public/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//模板引擎在Express中开放模板也是一个API的事</span><span class="token comment" spellcheck="true">// 当服务器收到get请求 / 的时候，执行回调处理函数</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 相当于server.listen</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app is runing at port 3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></li></ul><h3 id="学习Express"><a href="#学习Express" class="headerlink" title="学习Express"></a>学习Express</h3><h4 id="起步-1"><a href="#起步-1" class="headerlink" title="起步"></a>起步</h4><pre class=" language-javascript"><code class="language-javascript">cnpm install express</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入express</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1. 创建app</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//  2. </span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1</span>    <span class="token comment" spellcheck="true">// res.write('Hello');</span>    <span class="token comment" spellcheck="true">// res.write('World');</span>    <span class="token comment" spellcheck="true">// res.end()</span>    <span class="token comment" spellcheck="true">// 2</span>    <span class="token comment" spellcheck="true">// res.end('hello world');</span>    <span class="token comment" spellcheck="true">// 3</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express app is runing...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h5><p>路由：</p><ul><li><p>请求方法</p></li><li><p>请求路径</p></li><li><p>请求处理函数</p></li></ul><p>get:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//当你以get方法请求/的时候，执行对应的处理函数</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>post:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//当你以post方法请求/的时候，执行对应的处理函数</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="Express静态服务API"><a href="#Express静态服务API" class="headerlink" title="Express静态服务API"></a>Express静态服务API</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// app.use不仅仅是用来处理静态资源的，还可以做很多工作(body-parser的配置)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'files'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/stataic'</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入express</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建app</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 开放静态资源</span><span class="token comment" spellcheck="true">// 1.当以/public/开头的时候，去./public/目录中找对应资源</span><span class="token comment" spellcheck="true">// 访问：http://127.0.0.1:3000/public/login.html</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/public/'</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'./public/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2.当省略第一个参数的时候，可以通过省略/public的方式来访问</span><span class="token comment" spellcheck="true">// 访问：http://127.0.0.1:3000/login.html</span><span class="token comment" spellcheck="true">// app.use(express.static('./public/'));   </span><span class="token comment" spellcheck="true">// 3.访问：http://127.0.0.1:3000/a/login.html</span><span class="token comment" spellcheck="true">// a相当于public的别名</span><span class="token comment" spellcheck="true">// app.use('/a/',express.static('./public/')); </span><span class="token comment" spellcheck="true">//  </span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'express app is runing...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="在Express中配置使用art-templete模板引擎"><a href="#在Express中配置使用art-templete模板引擎" class="headerlink" title="在Express中配置使用art-templete模板引擎"></a>在Express中配置使用<code>art-templete</code>模板引擎</h5><ul><li><a href="https://aui.github.io/art-template/" target="_blank" rel="noopener">art-template官方文档</a></li><li>在node中，有很多第三方模板引擎都可以使用，不是只有<code>art-template</code><ul><li>还有ejs，jade（pug），handlebars，nunjucks</li></ul></li></ul><p>安装：</p><pre class=" language-shell"><code class="language-shell">npm install --save art-templatenpm install --save express-art-template//两个一起安装npm i --save art-template express-art-template</code></pre><p>配置：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-art-template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// express默认会去views目录找index.html</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>           title<span class="token punctuation">:</span><span class="token string">'hello world'</span>         <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>如果希望修改默认的<code>views</code>视图渲染存储目录，可以：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 第一个参数views千万不要写错</span>app<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span>目录路径<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="在Express中获取表单请求数据"><a href="#在Express中获取表单请求数据" class="headerlink" title="在Express中获取表单请求数据"></a>在Express中获取表单请求数据</h5><h6 id="获取get请求数据："><a href="#获取get请求数据：" class="headerlink" title="获取get请求数据："></a>获取get请求数据：</h6><p>Express内置了一个api，可以直接通过<code>req.query</code>来获取数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 通过requery方法获取用户输入的数据</span><span class="token comment" spellcheck="true">// req.query只能拿到get请求的数据</span> <span class="token keyword">var</span> comment <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">;</span></code></pre><h6 id="获取post请求数据："><a href="#获取post请求数据：" class="headerlink" title="获取post请求数据："></a>获取post请求数据：</h6><p>在Express中没有内置获取表单post请求体的api，这里我们需要使用一个第三方包<code>body-parser</code>来获取数据。</p><p>安装：</p><pre class=" language-javascript"><code class="language-javascript">npm install <span class="token operator">--</span>save body<span class="token operator">-</span>parser<span class="token punctuation">;</span></code></pre><p>配置：</p><p>// 配置解析表单 POST 请求体插件（注意：一定要在 app.use(router) 之前 ）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 引包</span><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 配置body-parser</span><span class="token comment" spellcheck="true">// 只要加入这个配置，则在req请求对象上会多出来一个属性：body</span><span class="token comment" spellcheck="true">// 也就是说可以直接通过req.body来获取表单post请求数据</span><span class="token comment" spellcheck="true">// parse application/x-www-form-urlencoded</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> extended<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// parse application/json</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>使用：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> <span class="token string">'text/plain'</span><span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'you posted:\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 可以通过req.body来获取表单请求数据</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="在Express中配置使用express-session插件操作"><a href="#在Express中配置使用express-session插件操作" class="headerlink" title="在Express中配置使用express-session插件操作"></a>在Express中配置使用<code>express-session</code>插件操作</h3><blockquote><p>参考文档：<a href="https://github.com/expressjs/session" target="_blank" rel="noopener">https://github.com/expressjs/session</a></p></blockquote><p>安装：</p><pre class=" language-javascript"><code class="language-javascript">npm install express<span class="token operator">-</span>session</code></pre><p>配置：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//该插件会为req请求对象添加一个成员:req.session默认是一个对象</span><span class="token comment" spellcheck="true">//这是最简单的配置方式</span><span class="token comment" spellcheck="true">//Session是基于Cookie实现的</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//配置加密字符串，他会在原有的基础上和字符串拼接起来去加密</span>  <span class="token comment" spellcheck="true">//目的是为了增加安全性，防止客户端恶意伪造</span>  secret<span class="token punctuation">:</span> <span class="token string">'keyboard cat'</span><span class="token punctuation">,</span>  resave<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  saveUninitialized<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//无论是否适用Session，都默认直接分配一把钥匙</span>  cookie<span class="token punctuation">:</span> <span class="token punctuation">{</span> secure<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>使用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 读</span><span class="token comment" spellcheck="true">//添加Session数据</span><span class="token comment" spellcheck="true">//session就是一个对象</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">'bar'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//写</span><span class="token comment" spellcheck="true">//获取session数据</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>foo<span class="token comment" spellcheck="true">//删</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">delete</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>foo</code></pre><p>提示：</p><p>默认Session数据时内存储数据，服务器一旦重启，真正的生产环境会把Session进行持久化存储。</p><h3 id="利用Express实现ADUS项目"><a href="#利用Express实现ADUS项目" class="headerlink" title="利用Express实现ADUS项目"></a>利用Express实现ADUS项目</h3><h4 id="模块化思想"><a href="#模块化思想" class="headerlink" title="模块化思想"></a>模块化思想</h4><p>模块如何划分:</p><ul><li>模块职责要单一</li></ul><p>javascript模块化：</p><ul><li>Node 中的 CommonJS</li><li>浏览器中的：<ul><li>AMD    require.js</li><li>CMD     sea.js</li></ul></li><li>es6中增加了官方支持</li></ul><h4 id="起步-2"><a href="#起步-2" class="headerlink" title="起步"></a>起步</h4><ul><li>初始化</li><li>模板处理</li></ul><h4 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h4><table><thead><tr><th>请求方法</th><th align="left">请求路径</th><th align="left">get参数</th><th>post参数</th><th align="left">备注</th></tr></thead><tbody><tr><td>GET</td><td align="left">/students</td><td align="left"></td><td></td><td align="left">渲染首页</td></tr><tr><td>GET</td><td align="left">/students/new</td><td align="left"></td><td></td><td align="left">渲染添加学生页面</td></tr><tr><td>POST</td><td align="left">/students/new</td><td align="left"></td><td>name,age,gender,hobbies</td><td align="left">处理添加学生请求</td></tr><tr><td>GET</td><td align="left">/students/edit</td><td align="left">id</td><td></td><td align="left">渲染编辑页面</td></tr><tr><td>POST</td><td align="left">/students/edit</td><td align="left"></td><td>id,name,age,gender,hobbies</td><td align="left">处理编辑请求</td></tr><tr><td>GET</td><td align="left">/students/delete</td><td align="left">id</td><td></td><td align="left">处理删除请求</td></tr></tbody></table><h4 id="提取路由模块"><a href="#提取路由模块" class="headerlink" title="提取路由模块"></a>提取路由模块</h4><p>router.js:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * router.js路由模块 * 职责： *      处理路由 *      根据不同的请求方法+请求路径设置具体的请求函数 * 模块职责要单一，我们划分模块的目的就是增强代码的可维护性，提升开发效率 */</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Express专门提供了一种更好的方式</span><span class="token comment" spellcheck="true">// 专门用来提供路由的</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1 创建一个路由容器</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2 把路由都挂载到路由容器中</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/students'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// res.send('hello world');</span>    <span class="token comment" spellcheck="true">// readFile的第二个参数是可选的，传入utf8就是告诉他把读取到的文件直接按照utf8编码，直接转成我们认识的字符</span>    <span class="token comment" spellcheck="true">// 除了这样来转换，也可以通过data.toString（）来转换</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./db.json'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Server error.'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 读取到的文件数据是string类型的数据</span>        <span class="token comment" spellcheck="true">// console.log(data);</span>        <span class="token comment" spellcheck="true">// 从文件中读取到的数据一定是字符串，所以一定要手动转换成对象</span>        <span class="token keyword">var</span> students <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>students<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 读取文件数据</span>            students<span class="token punctuation">:</span>students        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/students/new'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'new.html'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/students/edit'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/students/edit'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/students/delete'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3 把router导出</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>app.js:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./router'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// router(app);</span><span class="token comment" spellcheck="true">// 把路由容器挂载到app服务中</span><span class="token comment" spellcheck="true">// 挂载路由</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="设计操作数据的API文件模块"><a href="#设计操作数据的API文件模块" class="headerlink" title="设计操作数据的API文件模块"></a>设计操作数据的API文件模块</h4><p>es6中的find和findIndex：</p><p>find接受一个方法作为参数，方法内部返回一个条件</p><p>find会便利所有的元素，执行你给定的带有条件返回值的函数</p><p>符合该条件的元素会作为find方法的返回值</p><p>如果遍历结束还没有符合该条件的元素，则返回undefined</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * student.js * 数据操作文件模块 * 职责：操作文件中的数据，只处理数据，不关心业务 */</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/**  * 获取所有学生列表  * return []  */</span>exports<span class="token punctuation">.</span>find <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/**  * 获取添加保存学生  */</span>exports<span class="token punctuation">.</span>save <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 更新学生 */</span>exports<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/** * 删除学生 */</span>exports<span class="token punctuation">.</span><span class="token keyword">delete</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ul><li><p>处理模板</p></li><li><p>配置静态开放资源</p></li><li><p>配置模板引擎</p></li><li><p>简单的路由，/studens渲染静态页出来</p></li><li><p>路由设计</p></li><li><p>提取路由模块</p></li><li><p>由于接下来的一系列业务操作都需要处理文件数据，所以我们需要封装Student.js’</p></li><li><p>先写好student.js文件结构</p><ul><li>查询所有学生列别哦的API</li><li>findById</li><li>save</li><li>updateById</li><li>deleteById</li></ul></li><li><p>实现具体功能</p><ul><li>通过路由收到请求</li><li>接受请求中的参数（get，post）<ul><li>req.query</li><li>req.body</li></ul></li><li>调用数据操作API处理数据</li><li>根据操作结果给客户端发送请求</li></ul></li><li><p>业务功能顺序</p><ul><li>列表</li><li>添加</li><li>编辑</li><li>删除</li></ul></li></ul><h4 id="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"><a href="#子模板和模板的继承（模板引擎高级语法）【include，extend，block】" class="headerlink" title="子模板和模板的继承（模板引擎高级语法）【include，extend，block】"></a>子模板和模板的继承（模板引擎高级语法）【include，extend，block】</h4><p>注意:</p><p>模板页：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"zh"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"viewport"</span> content<span class="token operator">=</span><span class="token string">"width=device-width, initial-scale=1.0"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>meta http<span class="token operator">-</span>equiv<span class="token operator">=</span><span class="token string">"X-UA-Compatible"</span> content<span class="token operator">=</span><span class="token string">"ie=edge"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>模板页<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span>    <span class="token operator">&lt;</span>link rel<span class="token operator">=</span><span class="token string">"stylesheet"</span> href<span class="token operator">=</span><span class="token string">"/node_modules/bootstrap/dist/css/bootstrap.css"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> block <span class="token string">'head'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">/</span>block <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 通过include导入公共部分 <span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>include <span class="token string">'./header.html'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 留一个位置 让别的内容去填充 <span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> block  <span class="token string">'content'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>默认内容<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">/</span>block <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 通过include导入公共部分 <span class="token operator">--</span><span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span>include <span class="token string">'./footer.html'</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 公共样式 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/node_modules/jquery/dist/jquery.js"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"/node_modules/bootstrap/dist/js/bootstrap.js"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>    <span class="token punctuation">{</span><span class="token punctuation">{</span> block <span class="token string">'script'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">/</span>block <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>模板的继承：</p><p>​    header页面：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>公共的头部<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>​    footer页面：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>公共的底部<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><p>模板页的使用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> <span class="token function">继承</span><span class="token punctuation">(</span>extend<span class="token punctuation">:</span>延伸，扩展<span class="token punctuation">)</span>模板也layout<span class="token punctuation">.</span>html <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 把layout<span class="token punctuation">.</span>html页面的内容都拿进来作为index<span class="token punctuation">.</span>html页面的内容 <span class="token operator">--</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>extend <span class="token string">'./layout.html'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 向模板页面填充新的数据 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 填充后就会替换掉layout页面content中的数据 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> style样式方面的内容 <span class="token operator">--</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> block <span class="token string">'head'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>style type<span class="token operator">=</span><span class="token string">"text/css"</span><span class="token operator">></span>        body<span class="token punctuation">{</span>            background<span class="token operator">-</span>color<span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">/</span>block <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> block <span class="token string">'content'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">""</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h1<span class="token operator">></span>Index页面的内容<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">/</span>block <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> js部分的内容 <span class="token operator">--</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> block <span class="token string">'script'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">/</span>block <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终的显示效果：</p><p><img src="C:%5CUsers%5CA%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200316134759517.png" alt="image-20200316134759517"></p><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><h2 id="关系型和非关系型数据库"><a href="#关系型和非关系型数据库" class="headerlink" title="关系型和非关系型数据库"></a>关系型和非关系型数据库</h2><h3 id="关系型数据库（表就是关系，或者说表与表之间存在关系）。"><a href="#关系型数据库（表就是关系，或者说表与表之间存在关系）。" class="headerlink" title="关系型数据库（表就是关系，或者说表与表之间存在关系）。"></a>关系型数据库（表就是关系，或者说表与表之间存在关系）。</h3><ul><li>所有的关系型数据库都需要通过<code>sql</code>语言来操作</li><li>所有的关系型数据库在操作之前都需要设计表结构</li><li>而且数据表还支持约束<ul><li>唯一的</li><li>主键</li><li>默认值</li><li>非空</li></ul></li></ul><h3 id="非关系型数据库"><a href="#非关系型数据库" class="headerlink" title="非关系型数据库"></a>非关系型数据库</h3><ul><li>非关系型数据库非常的灵活</li><li>有的关系型数据库就是key-value对儿</li><li>但MongDB是长得最像关系型数据库的非关系型数据库<ul><li>数据库 -》 数据库</li><li>数据表 -》 集合（数组）</li><li>表记录 -》文档对象</li></ul></li></ul><p>一个数据库中可以有多个数据库，一个数据库中可以有多个集合（数组），一个集合中可以有多个文档（表记录）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>    qq<span class="token punctuation">:</span><span class="token punctuation">{</span>       user<span class="token punctuation">:</span><span class="token punctuation">[</span>           <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">...</span>       <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>也就是说你可以任意的往里面存数据，没有结构性这么一说</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>下载</p><ul><li>下载地址：<a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a></li></ul></li><li><p>安装</p><pre class=" language-javascript"><code class="language-javascript">npm i mongoose</code></pre></li><li><p>配置环境变量</p></li><li><p>最后输入<code>mongod --version</code>测试是否安装成功</p></li></ul><h2 id="启动和关闭数据库"><a href="#启动和关闭数据库" class="headerlink" title="启动和关闭数据库"></a>启动和关闭数据库</h2><p>启动：</p><pre class=" language-shell"><code class="language-shell"># mongodb 默认使用执行mongod 命令所处盼复根目录下的/data/db作为自己的数据存储目录# 所以在第一次执行该命令之前先自己手动新建一个 /data/dbmongod</code></pre><p>如果想要修改默认的数据存储目录，可以：</p><pre class=" language-javascript"><code class="language-javascript">mongod <span class="token operator">--</span>dbpath <span class="token operator">=</span> 数据存储目录路径</code></pre><p>停止：</p><pre class=" language-javascript"><code class="language-javascript">在开启服务的控制台，直接Ctrl<span class="token operator">+</span>C<span class="token punctuation">;</span>或者直接关闭开启服务的控制台。</code></pre><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>连接：</p><pre class=" language-javascript"><code class="language-javascript"># 该命令默认连接本机的 MongoDB 服务mongo</code></pre><p>退出：</p><pre class=" language-javascript"><code class="language-javascript"># 在连接状态输入 exit 退出连接exit</code></pre><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><ul><li><code>show dbs</code><ul><li>查看数据库列表(数据库中的所有数据库)</li></ul></li><li><code>db</code><ul><li>查看当前连接的数据库</li></ul></li><li><code>use 数据库名称</code><ul><li>切换到指定的数据库，（如果没有会新建）</li></ul></li><li><code>show collections</code><ul><li>查看当前目录下的所有数据表</li></ul></li><li><code>db.表名.find()</code><ul><li>查看表中的详细信息</li></ul></li></ul><h2 id="在Node中如何操作MongoDB数据库"><a href="#在Node中如何操作MongoDB数据库" class="headerlink" title="在Node中如何操作MongoDB数据库"></a>在Node中如何操作MongoDB数据库</h2><h3 id="使用官方的MongoDB包来操作"><a href="#使用官方的MongoDB包来操作" class="headerlink" title="使用官方的MongoDB包来操作"></a>使用官方的<code>MongoDB</code>包来操作</h3><blockquote><p>​    <a href="http://mongodb.github.io/node-mongodb-native/" target="_blank" rel="noopener">http://mongodb.github.io/node-mongodb-native/</a></p></blockquote><h3 id="使用第三方包mongoose来操作MongoDB数据库"><a href="#使用第三方包mongoose来操作MongoDB数据库" class="headerlink" title="使用第三方包mongoose来操作MongoDB数据库"></a>使用第三方包<code>mongoose</code>来操作MongoDB数据库</h3><p>​    第三方包：<code>mongoose</code>基于MongoDB官方的<code>mongodb</code>包再一次做了封装，名字叫<code>mongoose</code>，是WordPress项目团队开发的。</p><blockquote><p>​    <a href="https://mongoosejs.com/" target="_blank" rel="noopener">https://mongoosejs.com/</a></p></blockquote><h2 id="学习指南（步骤）"><a href="#学习指南（步骤）" class="headerlink" title="学习指南（步骤）"></a>学习指南（步骤）</h2><p>官方学习文档：<a href="https://mongoosejs.com/docs/index.html" target="_blank" rel="noopener">https://mongoosejs.com/docs/index.html</a></p><h3 id="设计Scheme-发布Model-创建表"><a href="#设计Scheme-发布Model-创建表" class="headerlink" title="设计Scheme 发布Model (创建表)"></a>设计Scheme 发布Model (创建表)</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1.引包</span><span class="token comment" spellcheck="true">// 注意：按照后才能require使用</span><span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 拿到schema图表</span><span class="token keyword">var</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2.连接数据库</span><span class="token comment" spellcheck="true">// 指定连接数据库后不需要存在，当你插入第一条数据库后会自动创建数据库</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'mongodb://localhost/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.设计集合结构（表结构）</span><span class="token comment" spellcheck="true">// 用户表</span><span class="token keyword">var</span> userSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//姓名</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        require<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//添加约束，保证数据的完整性，让数据按规矩统一</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>        require<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> String    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.将文档结构发布为模型</span><span class="token comment" spellcheck="true">// mongoose.model方法就是用来将一个架构发布为 model</span><span class="token comment" spellcheck="true">//         第一个参数：传入一个大写名词单数字符串用来表示你的数据库的名称</span><span class="token comment" spellcheck="true">//                     mongoose 会自动将大写名词的字符串生成 小写复数 的集合名称</span><span class="token comment" spellcheck="true">//                     例如 这里会变成users集合名称</span><span class="token comment" spellcheck="true">//         第二个参数：架构</span><span class="token comment" spellcheck="true">//     返回值：模型构造函数</span><span class="token keyword">var</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">'User'</span><span class="token punctuation">,</span> userSchema<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="添加数据（增）"><a href="#添加数据（增）" class="headerlink" title="添加数据（增）"></a>添加数据（增）</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 5.通过模型构造函数对User中的数据进行操作</span><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>    email<span class="token punctuation">:</span> <span class="token string">'xiaochen@qq.com'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'保存成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="删除（删）"><a href="#删除（删）" class="headerlink" title="删除（删）"></a>删除（删）</h3><p>根据条件删除所有：</p><pre class=" language-javascript"><code class="language-javascript">User<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'xiaoxiao'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'删除成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据条件删除一个：</p><pre class=" language-javascript"><code class="language-javascript">Model<span class="token punctuation">.</span><span class="token function">findOneAndRemove</span><span class="token punctuation">(</span>conditions<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据id删除一个：</p><pre class=" language-javascript"><code class="language-javascript">User<span class="token punctuation">.</span><span class="token function">findByIdAndRemove</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="更新（改）"><a href="#更新（改）" class="headerlink" title="更新（改）"></a>更新（改）</h3><p>更新所有：</p><pre class=" language-javascript"><code class="language-javascript">User<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>conditions<span class="token punctuation">,</span>doc<span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据指定条件更新一个：</p><pre class=" language-javascript"><code class="language-javascript">User<span class="token punctuation">.</span><span class="token function">FindOneAndUpdate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>conditions<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>update<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>options<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>根据id更新一个：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 更新    根据id来修改表数据</span>User<span class="token punctuation">.</span><span class="token function">findByIdAndUpdate</span><span class="token punctuation">(</span><span class="token string">'5e6c5264fada77438c45dfcd'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'junjun'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'更新失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'更新成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="查询（查）"><a href="#查询（查）" class="headerlink" title="查询（查）"></a>查询（查）</h3><p>查询所有：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 查询所有</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'查询失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>条件查询所有：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 根据条件查询</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span> username<span class="token punctuation">:</span><span class="token string">'xiaoxiao'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'查询失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>条件查询单个：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 按照条件查询单个，查询出来的数据是一个对象（{}）</span><span class="token comment" spellcheck="true">// 没有条件查询使用findOne方法，查询的是表中的第一条数据</span>User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span> <span class="token string">'xiaoxiao'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ret<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'查询失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="使用Node操作MySQL数据库"><a href="#使用Node操作MySQL数据库" class="headerlink" title="使用Node操作MySQL数据库"></a>使用Node操作MySQL数据库</h1><p>文档：<a href="https://www.npmjs.com/package/mysql" target="_blank" rel="noopener">https://www.npmjs.com/package/mysql</a></p><p>安装：</p><pre class=" language-shell"><code class="language-shell">npm install --save  mysql</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引入mysql包</span><span class="token keyword">var</span> mysql      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mysql'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建连接</span><span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  host     <span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//本机</span>  user     <span class="token punctuation">:</span> <span class="token string">'me'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//账号root</span>  password <span class="token punctuation">:</span> <span class="token string">'secret'</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//密码12345</span>  database <span class="token punctuation">:</span> <span class="token string">'my_db'</span>    <span class="token comment" spellcheck="true">//数据库名</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 连接数据库    （打开冰箱门）</span>connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行数据操作    （把大象放到冰箱）</span>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">'SELECT * FROM `users` '</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抛出异常阻止代码往下执行</span>  <span class="token comment" spellcheck="true">// 没有异常打印输出结果</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The solution is: '</span><span class="token punctuation">,</span>results<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭连接    （关闭冰箱门）</span>connection<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>不成立的情况下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ret <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//到这里执行就结束了，不会i等到前面的定时器，所以直接返回了默认值 undefined</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 结果是 1 3 undefined 4</span></code></pre><p>使用回调函数解决：</p><p>回调函数：通过一个函数，获取函数内部的操作。（根据输入得到输出结果）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ret<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// callback就是回调函数</span>    <span class="token comment" spellcheck="true">// var x = 10;</span>    <span class="token comment" spellcheck="true">// var y = 20;</span>    <span class="token comment" spellcheck="true">// var callback = function(ret){console.log(ret);}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> ret <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>        <span class="token function">callback</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意：</p><p>​    凡是需要得到一个函数内部异步操作的结果（setTimeout,readFile,writeFile,ajax,readdir）</p><p>​    这种情况必须通过   回调函数 (异步API都会伴随着一个回调函数)</p><p>ajax:</p><p>基于原生XMLHttpRequest封装get方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> oReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当请求加载成功要调用指定的函数</span>oReq<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oReq<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>oReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"请求路径"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> oReq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当请求加载成功要调用指定的函数</span>    oReq<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//console.log(oReq.responseText);</span>        <span class="token function">callback</span><span class="token punctuation">(</span>oReq<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    oReq<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oReq<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><p>callback  hell（回调地狱）:</p><p>文件的读取无法判断执行顺序（文件的执行顺序是依据文件的大小来决定的）(异步api无法保证文件的执行顺序)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.text'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1 读取失败直接打印输出读取失败</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2 抛出异常</span>        <span class="token comment" spellcheck="true">//         阻止程序的执行</span>        <span class="token comment" spellcheck="true">//         把错误信息打印到控制台</span>        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.text'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1 读取失败直接打印输出读取失败</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2 抛出异常</span>        <span class="token comment" spellcheck="true">//         阻止程序的执行</span>        <span class="token comment" spellcheck="true">//         把错误信息打印到控制台</span>        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过回调嵌套的方式来保证顺序：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.text'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1 读取失败直接打印输出读取失败</span>        <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2 抛出异常</span>        <span class="token comment" spellcheck="true">//         阻止程序的执行</span>        <span class="token comment" spellcheck="true">//         把错误信息打印到控制台</span>        <span class="token keyword">throw</span> err<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/b.text'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1 读取失败直接打印输出读取失败</span>            <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 2 抛出异常</span>            <span class="token comment" spellcheck="true">//         阻止程序的执行</span>            <span class="token comment" spellcheck="true">//         把错误信息打印到控制台</span>            <span class="token keyword">throw</span> err<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./data/a.text'</span><span class="token punctuation">,</span><span class="token string">'utf8'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 1 读取失败直接打印输出读取失败</span>                <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 2 抛出异常</span>                <span class="token comment" spellcheck="true">//         阻止程序的执行</span>                <span class="token comment" spellcheck="true">//         把错误信息打印到控制台</span>                <span class="token keyword">throw</span> err<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>Promise：承诺，保证</li><li>Promise本身不是异步的，但往往都是内部封装一个异步任务</li></ul><p>基本语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 在EcmaScript 6中新增了一个API Promise</span><span class="token comment" spellcheck="true">// Promise 是一个构造函数</span><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1 创建Promise容器        resolve:解决   reject：失败</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'./a.text'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(err);</span>            <span class="token comment" spellcheck="true">// 把容器的Pending状态变为rejected</span>            <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// console.log(data);</span>            <span class="token comment" spellcheck="true">// 把容器的Pending状态变为resolve</span>            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当p1成功了，然后就（then）做指定的操作</span><span class="token comment" spellcheck="true">// then方法接收的function就是容器中的resolve函数</span>p1    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'读取文件失败了'</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>封装Promise的<code>readFile</code>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./a.txt'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./b.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">pReadFile</span><span class="token punctuation">(</span><span class="token string">'./a.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>mongoose所有的API都支持Promise：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 查询所有</span>User<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>注册：</p><pre class=" language-javascript"><code class="language-javascript">User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>username<span class="token punctuation">:</span><span class="token string">'admin'</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户已存在'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>             username<span class="token punctuation">:</span><span class="token string">'aaa'</span><span class="token punctuation">,</span>             password<span class="token punctuation">:</span><span class="token string">'123'</span><span class="token punctuation">,</span>             email<span class="token punctuation">:</span><span class="token string">'fffff'</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'注册成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript">User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    username<span class="token punctuation">:</span><span class="token string">'admin'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 用户已经存在不能注册</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'用户已存在'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 用户不存在可以注册</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                username<span class="token punctuation">:</span><span class="token string">'aaa'</span><span class="token punctuation">,</span>                password<span class="token punctuation">:</span><span class="token string">'123'</span><span class="token punctuation">,</span>                email<span class="token punctuation">:</span><span class="token string">'fffff'</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">funciton</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'注册成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><p>async函数</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="修改完代码自动重启"><a href="#修改完代码自动重启" class="headerlink" title="修改完代码自动重启"></a>修改完代码自动重启</h2><p>我们在这里可以使用一个第三方命名行工具：<code>nodemon</code>来帮助我们解决频繁修改代码重启服务器的问题。</p><p><code>nodemon</code>是一个基于Node.js开发的一个第三方命令行工具，我们使用的时候需要独立安装：</p><pre class=" language-javascript"><code class="language-javascript">#在任意目录执行该命令都可以#也就是说，所有需要 <span class="token operator">--</span>global安装的包都可以在任意目录执行npm install <span class="token operator">--</span>global nodemonnpm install <span class="token operator">-</span>g nodemon#如果安装不成功的话，可以使用cnpm安装cnpm install <span class="token operator">-</span>g nodemon</code></pre><p>安装完毕之后使用：</p><pre class=" language-javascript"><code class="language-javascript">node app<span class="token punctuation">.</span>js#使用nodemonnodemon app<span class="token punctuation">.</span>js</code></pre><p>只要是通过<code>nodemon</code>启动的服务，则他会监视你的文件变化，当文件发生变化的时候，会自动帮你重启服务器。</p><h2 id="封装异步API"><a href="#封装异步API" class="headerlink" title="封装异步API"></a>封装异步API</h2><p>回调函数：获取异步操作的结果</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// var callback = funtion(data){ console.log(data); }</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>        <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果需要获取一个函数中异步操作的结果，则必须通过回调函数的方式来获取</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="数组的遍历方法，都是对函数作为一种参数"><a href="#数组的遍历方法，都是对函数作为一种参数" class="headerlink" title="数组的遍历方法，都是对函数作为一种参数"></a>数组的遍历方法，都是对函数作为一种参数</h2><h2 id="EcmaScript-6"><a href="#EcmaScript-6" class="headerlink" title="EcmaScript 6"></a>EcmaScript 6</h2><blockquote><p>参考文档：<a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">https://es6.ruanyifeng.com/</a></p></blockquote><h1 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h1><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">.</span>app<span class="token punctuation">.</span>js    项目的入口文件controllersmodels    存储使用mongoose设计的数据模型node_modules    第三方包<span class="token keyword">package</span><span class="token punctuation">.</span>json    包描述文件<span class="token keyword">package</span><span class="token operator">-</span>lock<span class="token punctuation">.</span>json    第三方包版本锁定文件（npm5之后才有）<span class="token keyword">public</span>    公共静态资源routesviews    存储视图目录</code></pre><h2 id="模板页"><a href="#模板页" class="headerlink" title="模板页"></a>模板页</h2><ul><li>子模板</li><li>模板继承</li></ul><h2 id="路由设计-1"><a href="#路由设计-1" class="headerlink" title="路由设计"></a>路由设计</h2><table><thead><tr><th>路由</th><th>方法</th><th>get参数</th><th>post参数</th><th>是否需要登录</th><th>备注</th></tr></thead><tbody><tr><td>/</td><td>get</td><td></td><td></td><td></td><td>渲染首页</td></tr><tr><td>/register(登录)</td><td>get</td><td></td><td></td><td></td><td>渲染注册页面</td></tr><tr><td>/register</td><td>post</td><td></td><td>email,nickname,password</td><td></td><td>处理注册请求</td></tr><tr><td>/login</td><td>get</td><td></td><td></td><td></td><td>渲染登陆界面</td></tr><tr><td>/login</td><td>post</td><td></td><td>email,password</td><td></td><td>处理登录请求</td></tr><tr><td>/loginout</td><td>get</td><td></td><td></td><td></td><td>处理退出请求</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h2><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h2 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h2><ul><li>创建目录结构</li><li>整合静态也-模板页<ul><li>include</li><li>block</li><li>extend</li></ul></li><li>设计用户登陆，退出，注册的路由</li><li>用户注册<ul><li>先处理客户端页面的内容（表单控件的name，收集表单数据，发起请求）</li><li>服务端<ul><li>获取从客户端收到的数据</li><li>操作数据库<ul><li>如果有错，发送500告诉客户端服务器错了‘</li><li>其他的根据业务发送不同的响应数据</li></ul></li></ul></li></ul></li><li>登录</li><li>退出</li></ul><h1 id="Express中间件"><a href="#Express中间件" class="headerlink" title="Express中间件"></a>Express中间件</h1><h2 id="中间件的概念"><a href="#中间件的概念" class="headerlink" title="中间件的概念"></a>中间件的概念</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/guide/using-middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/guide/using-middleware.html</a></p></blockquote><p>中间件：把很复杂的事情分割成单个，然后依次有条理的执行。就是一个中间处理环节，有输入，有输出。</p><p>说的通俗易懂点儿，中间件就是一个（从请求到响应调用的方法）方法。</p><p>把数据从请求到响应分步骤来处理，每一个步骤都是一个中间处理环节。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cookie <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./expressPtoject/cookie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./expressPtoject/query'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> postBody <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./expressPtoject/post-body'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 解析请求地址中的get参数</span>    <span class="token comment" spellcheck="true">// var obj = url.parse(req.url,true);</span>    <span class="token comment" spellcheck="true">// req.query = obj.query;</span>    <span class="token function">query</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//中间件</span>    <span class="token comment" spellcheck="true">// 解析请求地址中的post参数</span>    req<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>        foo<span class="token punctuation">:</span><span class="token string">'bar'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理请求</span>    <span class="token operator">...</span><span class="token punctuation">}</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'3000 runing...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同一个请求对象所经过的中间件都是同一个请求对象和响应对象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/abc'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 同一个请求的req和res是一样的，</span>    <span class="token comment" spellcheck="true">// 可以前面存储下面调用</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// req.foo = 'bar';</span>    req<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token string">'xiaoxiao'</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span><span class="token number">18</span>    <span class="token punctuation">}</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/abc'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(req.foo);</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app is running at port 3000.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="中间件的分类"><a href="#中间件的分类" class="headerlink" title="中间件的分类:"></a>中间件的分类:</h2><h3 id="应用程序级别的中间件"><a href="#应用程序级别的中间件" class="headerlink" title="应用程序级别的中间件"></a>应用程序级别的中间件</h3><p>万能匹配（不关心任何请求路径和请求方法的中间件）：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">,</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关心请求路径和请求方法的中间件：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Time'</span><span class="token punctuation">,</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h3><p>严格匹配请求路径和请求方法的中间件</p><p>get:</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>post：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'post'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>put:</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/user'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'put'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>delete:</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'/delete'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'delete'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="总"><a href="#总" class="headerlink" title="总"></a>总</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 中间件：处理请求，本质就是个函数</span><span class="token comment" spellcheck="true">// 在express中，对中间件有几种分类</span><span class="token comment" spellcheck="true">// 1 不关心任何请求路径和请求方法的中间件</span><span class="token comment" spellcheck="true">// 也就是说任何请求都会进入这个中间件</span><span class="token comment" spellcheck="true">// 中间件本身是一个方法，该方法接收三个参数</span><span class="token comment" spellcheck="true">// Request 请求对象</span><span class="token comment" spellcheck="true">// Response 响应对象</span><span class="token comment" spellcheck="true">// next 下一个中间件</span><span class="token comment" spellcheck="true">// // 全局匹配中间件</span><span class="token comment" spellcheck="true">// app.use(function(req, res, next) {</span><span class="token comment" spellcheck="true">//     console.log('1');</span><span class="token comment" spellcheck="true">//     // 当一个请求进入中间件后</span><span class="token comment" spellcheck="true">//     // 如果需要请求另外一个方法则需要使用next（）方法</span><span class="token comment" spellcheck="true">//     next();</span><span class="token comment" spellcheck="true">//     // next是一个方法，用来调用下一个中间件</span><span class="token comment" spellcheck="true">//  // 注意：next（）方法调用下一个方法的时候，也会匹配（不是调用紧挨着的哪一个）</span><span class="token comment" spellcheck="true">// });</span><span class="token comment" spellcheck="true">// app.use(function(req, res, next) {</span><span class="token comment" spellcheck="true">//     console.log('2');</span><span class="token comment" spellcheck="true">// });</span><span class="token comment" spellcheck="true">// // 2 关心请求路径的中间件</span><span class="token comment" spellcheck="true">// // 以/xxx开头的中间件</span><span class="token comment" spellcheck="true">// app.use('/a',function(req, res, next) {</span><span class="token comment" spellcheck="true">//     console.log(req.url);</span><span class="token comment" spellcheck="true">// });</span><span class="token comment" spellcheck="true">// 3 严格匹配请求方法和请求路径的中间件</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'app is running at port 3000.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h2><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Something broke'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>配置使用404中间件：</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'404.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>配置全局错误处理中间件:</p><pre class=" language-javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/a'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">'.a/bc'</span><span class="token punctuation">,</span> <span class="token function">funtion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 当调用next()传参后，则直接进入到全局错误处理中间件方法中</span>            <span class="token comment" spellcheck="true">// 当发生全局错误的时候，我们可以调用next传递错误对象</span>            <span class="token comment" spellcheck="true">// 然后被全局错误处理中间件匹配到并进行处理</span>            <span class="token function">next</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//全局错误处理中间件</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span>req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        err_code<span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">,</span>        message<span class="token punctuation">:</span>err<span class="token punctuation">.</span>message    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="内置中间件"><a href="#内置中间件" class="headerlink" title="内置中间件"></a>内置中间件</h2><ul><li>express.static(提供静态文件)<ul><li><a href="http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express" target="_blank" rel="noopener">http://expressjs.com/en/starter/static-files.html#serving-static-files-in-express</a></li></ul></li></ul><h2 id="第三方中间件"><a href="#第三方中间件" class="headerlink" title="第三方中间件"></a>第三方中间件</h2><blockquote><p>参考文档：<a href="http://expressjs.com/en/resources/middleware.html" target="_blank" rel="noopener">http://expressjs.com/en/resources/middleware.html</a></p></blockquote><ul><li>body-parser</li><li>compression</li><li>cookie-parser</li><li>mogran</li><li>response-time</li><li>server-static</li><li>session</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 语法 </tag>
            
            <tag> node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora常用快捷键</title>
      <link href="/2020/05/24/typora-chang-yong-kuai-jie-jian/"/>
      <url>/2020/05/24/typora-chang-yong-kuai-jie-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h3 id="1、自动完成"><a href="#1、自动完成" class="headerlink" title="1、自动完成"></a>1、自动完成</h3><p>在macOS上，您可以按Esc键打开内联数学预览、自动完成表情符号等功能。</p><h3 id="2、文件"><a href="#2、文件" class="headerlink" title="2、文件"></a>2、文件</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align="left">新建</td><td align="left">Ctrl + N</td><td>Command + N</td></tr><tr><td align="left">新窗口</td><td align="left">Ctrl + Shift + N</td><td>Command + Shift + N</td></tr><tr><td align="left">新标签</td><td align="left"><em>（不支持）</em></td><td>Command + T</td></tr><tr><td align="left">打开</td><td align="left">Ctrl + O</td><td>Command + O</td></tr><tr><td align="left">快速打开</td><td align="left">Ctrl + P</td><td>Command + Shift + O</td></tr><tr><td align="left">重新打开已关闭文件</td><td align="left">Ctrl + Shift + T</td><td>Command + Shift + T</td></tr><tr><td align="left">保存</td><td align="left">Ctrl + S</td><td>Command + S</td></tr><tr><td align="left">另存为/复制</td><td align="left">Ctrl + Shift + S</td><td>Command + Shift + S</td></tr><tr><td align="left">偏好</td><td align="left">Ctrl + ，</td><td>Command + ，</td></tr><tr><td align="left">关闭</td><td align="left">Ctrl + W</td><td>Command + W</td></tr></tbody></table><h3 id="3、编辑"><a href="#3、编辑" class="headerlink" title="3、编辑"></a>3、编辑</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align="left">新段落</td><td align="left">Enter</td><td>Enter</td></tr><tr><td align="left">新线</td><td align="left">Shift + Enter</td><td>Shift + Enter</td></tr><tr><td align="left">剪切</td><td align="left">Ctrl + X</td><td>Command + X</td></tr><tr><td align="left">复制</td><td align="left">Ctrl + C</td><td>Command + C</td></tr><tr><td align="left">粘贴</td><td align="left">Ctrl + V</td><td>Command + V</td></tr><tr><td align="left">复制为 Markdown</td><td align="left">Ctrl + Shift + C</td><td>Command + Shift + C</td></tr><tr><td align="left">粘贴为纯文本</td><td align="left">Ctrl + Shift + V</td><td>Command + Shift + V</td></tr><tr><td align="left">全选</td><td align="left">Ctrl + A</td><td>Command + A</td></tr><tr><td align="left">选择行/句子  选择行（在表中）</td><td align="left">Ctrl + L</td><td>Command + L</td></tr><tr><td align="left">删除行（在表中）</td><td align="left">Ctrl + Shift +退格键</td><td>Command + Shift + 退格键</td></tr><tr><td align="left">选择样式范围 选择单元格（在表中）</td><td align="left">Ctrl + E</td><td>Command + E</td></tr><tr><td align="left">选择单词</td><td align="left">Ctrl + D</td><td>Command + D</td></tr><tr><td align="left">删除单词</td><td align="left">Ctrl + Shift + D</td><td>Command + Shift + D</td></tr><tr><td align="left">跳到顶部</td><td align="left">Ctrl +Home</td><td>Command + ↑</td></tr><tr><td align="left">跳至选择</td><td align="left">Ctrl + J</td><td>Command + J</td></tr><tr><td align="left">跳到底部</td><td align="left">Ctrl + End</td><td>Command + ↓</td></tr><tr><td align="left">查找</td><td align="left">Ctrl + F</td><td>Command + F</td></tr><tr><td align="left">查找下一个</td><td align="left">F3 / Enter</td><td>Command + G / Enter</td></tr><tr><td align="left">查找上一个</td><td align="left">Shift + F3 / Shift + Enter</td><td>Command + Shift + G / Shift + Enter</td></tr><tr><td align="left">替换</td><td align="left">Ctrl + H</td><td>Command + H</td></tr></tbody></table><h3 id="6、段落"><a href="#6、段落" class="headerlink" title="6、段落"></a>6、段落</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align="left">标题 1 至 6</td><td align="left">Ctrl + 1/2/3/4/5/6</td><td>Command + 1/2/3/4/5/6</td></tr><tr><td align="left">段落</td><td align="left">Ctrl + 0</td><td>Command + 0</td></tr><tr><td align="left">增加标题级别</td><td align="left">Ctrl + =</td><td>Command + =</td></tr><tr><td align="left">降低标题级别</td><td align="left">Ctrl +-</td><td>Command + -</td></tr><tr><td align="left">表</td><td align="left">Ctrl + T</td><td>Command + Option + T</td></tr><tr><td align="left">代码围栏</td><td align="left">Ctrl + Shift + K</td><td>Command + Option + C</td></tr><tr><td align="left">数学块</td><td align="left">Ctrl + Shift + M</td><td>Command + Option + B</td></tr><tr><td align="left">引用</td><td align="left">Ctrl + Shift + Q</td><td>Command + Option + Q</td></tr><tr><td align="left">有序列表</td><td align="left">Ctrl + Shift + [</td><td>Command + Option + O</td></tr><tr><td align="left">无序列表</td><td align="left">Ctrl + Shift +]</td><td>Command + Option + U</td></tr><tr><td align="left">缩进</td><td align="left">Ctrl + [ / Tab</td><td>Command + [ / Tab</td></tr><tr><td align="left">突出</td><td align="left">Ctrl +] / Shift + Tab</td><td>Command +] / Shift + Tab</td></tr></tbody></table><h3 id="5、格式"><a href="#5、格式" class="headerlink" title="5、格式"></a>5、格式</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align="left">加粗</td><td align="left">Ctrl + B</td><td>Command + B</td></tr><tr><td align="left">重点</td><td align="left">Ctrl + I</td><td>Command + I</td></tr><tr><td align="left">下划线</td><td align="left">Ctrl + U</td><td>Command + U</td></tr><tr><td align="left">代码</td><td align="left">Ctrl + Shift + k</td><td></td></tr><tr><td align="left">Strike</td><td align="left">Alt + Shift + 5</td><td>Ctrl + Shift + `</td></tr><tr><td align="left">超链接</td><td align="left">Ctrl + K</td><td>Command + K</td></tr><tr><td align="left">图片</td><td align="left">Ctrl + Shift + I</td><td>Command + Control + I</td></tr><tr><td align="left">清除格式</td><td align="left">Ctrl + \</td><td>Comand + \</td></tr></tbody></table><h3 id="6、查看"><a href="#6、查看" class="headerlink" title="6、查看"></a>6、查看</h3><table><thead><tr><th align="left">功能</th><th align="left">Windows / Linux</th><th>macOS</th></tr></thead><tbody><tr><td align="left">切换侧边栏</td><td align="left">Ctrl + Shift + L</td><td>Command + Shift + L</td></tr><tr><td align="left">大纲</td><td align="left">Ctrl + Shift + 1</td><td>Command + Shift + 1</td></tr><tr><td align="left">文章</td><td align="left">Ctrl + Shift + 2</td><td>Command + Control + 2</td></tr><tr><td align="left">文件树</td><td align="left">Ctrl + Shift + 3</td><td>Command + Control + 3</td></tr><tr><td align="left">源代码模式</td><td align="left">Ctrl + /</td><td>Command + /</td></tr><tr><td align="left">聚焦模式</td><td align="left">F8</td><td>F8</td></tr><tr><td align="left">打字机模式</td><td align="left">F9</td><td>F9</td></tr><tr><td align="left">切换全屏</td><td align="left">F11</td><td>Command + Option + F</td></tr><tr><td align="left">实际尺寸</td><td align="left">Ctrl + Shift + 0</td><td><em>（不支持）</em></td></tr><tr><td align="left">放大</td><td align="left">Ctrl + Shift + =</td><td><em>（不支持）</em></td></tr><tr><td align="left">缩小</td><td align="left">Ctrl + Shift +-</td><td><em>（不支持）</em></td></tr><tr><td align="left">在打开的文档之间切换</td><td align="left">Ctrl + Tab</td><td>Command + `</td></tr><tr><td align="left">切换开发工具</td><td align="left">Ctrl + Shift + I</td><td>-</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux心得</title>
      <link href="/2020/05/22/linux-xin-de/"/>
      <url>/2020/05/22/linux-xin-de/</url>
      
        <content type="html"><![CDATA[<h3 id="1、环境java与maven搭建"><a href="#1、环境java与maven搭建" class="headerlink" title="1、环境java与maven搭建"></a>1、环境java与maven搭建</h3><h4 id="1-、Ubuntu设置JAVA和maven环境变量"><a href="#1-、Ubuntu设置JAVA和maven环境变量" class="headerlink" title="1)、Ubuntu设置JAVA和maven环境变量"></a>1)、Ubuntu设置JAVA和maven环境变量</h4><p>命令安装jdk</p><p>//oraclejdk</p><p>sudo apt-get install oracle-java8-installer  </p><p>//openjdk</p><p>sudo apt-get install openjdk-8-jdk</p><p>yum install java-1.8.0-openjdk* -y</p><blockquote><p>sudo vim ~/.bashrc               ##bash下  当前用户</p><p>sudo vim /etc/profile      ##全局</p><p>sudo vim ~/.zshrc              ##zsh下</p></blockquote><pre class=" language-shell"><code class="language-shell"># jdkexport JAVA_HOME=/usr/local/jdk1.8.0_251export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/libexport PATH=${JAVA_HOME}/bin:$PATH# mavenM2_HOME=/usr/local/apache-maven-3.6.3-bin/apache-maven-3.6.3export MAVEN_OPTS="-Xms256m -Xmx512m"export PATH=$M2_HOME/bin:$PATH</code></pre><p>使新配置生效</p><pre class=" language-shell"><code class="language-shell">source ~/.zshrc source ~/.basshrc source  /etc/profile</code></pre><h4 id="2-、Maven设置完环境变量报错"><a href="#2-、Maven设置完环境变量报错" class="headerlink" title="2)、Maven设置完环境变量报错"></a>2)、Maven设置完环境变量报错</h4><p>问题:</p><p>测试maven环境变量是否配置好出现问题.</p><p>报错:</p><pre class=" language-shell"><code class="language-shell">Apache Maven 3.6.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)Maven home: /usr/local/apache-maven-3.6.3-bin/apache-maven-3.6.3Java version: 1.8.0_251, vendor: Oracle Corporation, runtime: /usr/local/jdk1.8.0_251/jreDefault locale: zh_CN, platform encoding: UTF-8OS name: "linux", version: "5.3.0-51-generic", arch: "amd64", family: "unix"</code></pre><p>原因:</p><p>maven依赖JAVA_HOME,而它现在找不到JAVA_HOME配置.</p><p>解决:</p><p>检查本地环境变量是否设置JAVA_HOME,没设置则一定要添加</p><p><del>/.zshrc 和</del>/.bashrc检查一下.再看看/etc/profile文件.</p><p>仔细核查路径是否正确,如错误修改之后</p><p>一定要记得歇source命令.对应修改文件</p><pre class=" language-shell"><code class="language-shell">source ~/.zshrc source ~/.basshrc source  /etc/profile</code></pre><h3 id="2、Ubuntu18-网速显示-插件-显示在状态栏"><a href="#2、Ubuntu18-网速显示-插件-显示在状态栏" class="headerlink" title="2、Ubuntu18 网速显示 插件 显示在状态栏"></a>2、Ubuntu18 网速显示 插件 显示在状态栏</h3><p>需求</p><p>在状态栏显示网速，以及内存，CPU。</p><p>安装</p><p>依次在终端执行下面三条命令。</p><pre><code>sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor</code></pre><p>上面的那条命令需要按<strong>回车</strong>继续</p><pre><code>sudo apt-get updatesudo apt-get install -y indicator-sysmonitor</code></pre><p>启动</p><p>在应用程序中搜索sys，就像下面这样</p><p><a href="https://www.tuziang.com/usr/uploads/2019/05/4185065958.png" target="_blank" rel="noopener"><img src="https://www.tuziang.com/usr/uploads/2019/05/4185065958.png" alt="Ubuntu18 网速显示 插件 显示在状态栏 "></a></p><p>点击“System Monitor Indicator” 就启动了。</p><p>配置</p><p>如果你需要配置成你想要的样子，点击”Preferences.“</p><p><a href="https://www.tuziang.com/usr/uploads/2019/05/1207038625.png" target="_blank" rel="noopener"><img src="https://www.tuziang.com/usr/uploads/2019/05/1207038625.png" alt="Ubuntu18 网速显示 插件 显示在状态栏 "></a></p><p>然后就可以配置了。</p><p><a href="https://www.tuziang.com/usr/uploads/2019/05/1580404008.png" target="_blank" rel="noopener"><img src="https://www.tuziang.com/usr/uploads/2019/05/1580404008.png" alt="Ubuntu18 网速显示 插件 显示在状态栏 "></a></p><p>比如我就加了个显示网速的功能：</p><pre><code>cpu: {cpu} mem: {mem} net:{net}</code></pre><p>如果需要它每次启动电脑都自动运行，需要勾选下面的选项：</p><p><a href="https://www.tuziang.com/usr/uploads/2019/05/122388909.png" target="_blank" rel="noopener"><img src="https://www.tuziang.com/usr/uploads/2019/05/122388909.png" alt="Ubuntu18 网速显示 插件 显示在状态栏 "></a></p><p>最后点击Save即可保存生效。</p><h3 id="3、展示自己系统信息以及配置"><a href="#3、展示自己系统信息以及配置" class="headerlink" title="3、展示自己系统信息以及配置"></a>3、展示自己系统信息以及配置</h3><p>sudo apt-get install screenfetch</p><p>screenfetch</p><p><img src="/home/mi2/.config/Typora/typora-user-images/image-20200525093845726.png" alt="image-20200525093845726"></p><h3 id="4、ubuntu-使用dosbox和masm"><a href="#4、ubuntu-使用dosbox和masm" class="headerlink" title="4、ubuntu 使用dosbox和masm"></a>4、ubuntu 使用dosbox和masm</h3><h5 id="1-软件下载："><a href="#1-软件下载：" class="headerlink" title="1. 软件下载："></a>1. 软件下载：</h5><p>dosbox安装：</p><pre class=" language-shell"><code class="language-shell">sudo apt-get install dosbox</code></pre><h5 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h5><p>1.创建文件夹MASM，将masm.exe, link.exe, debug.exe 放入文件夹中(本人百度网盘有)</p><pre class=" language-shell"><code class="language-shell">mkdir ~/MASM#再将masm.exe, link.exe, debug.exe移入进去</code></pre><p>2.dosbox环境配置</p><pre class=" language-shell"><code class="language-shell">#首先进入配置文件(类比windows path)sudo vim ~.dosbox/dosbox-0.74.conf#修改配置文件(类比添加环境变量) 底部增加以下配置mount c ~/MASMpath=%path%;c:\masmc: </code></pre><blockquote><p>mount c ~\MASM, 是相当于用c: 来表示 ~\ms-dos 路径，执行该命令后输入 c:，回车进入 ~\ms-dos 路径。<br> path=%path%;\masm，相当于将目录MASM路径加入了path中，当执行masm,link,debug命令时不用进入目录masm。不添加该路径必须进入MASM目录才能够进行MASM,link,debug操作。<br> <strong>这里注意一下，执行文件的话必须要进入文件的目录下。博主为了偷懒，试过很多添加环境变量的方法，都没有成功，最终还是得进入文件所在目录。读者有解决方法希望能留言区交流。</strong></p></blockquote><h5 id="3-文件编写"><a href="#3-文件编写" class="headerlink" title="3. 文件编写"></a>3. 文件编写</h5><blockquote><p>编写MASM文件，保存在MASM目录下。为什么添加到MASM目录下？因为asm目录已经添加到了path中，这样子方便对文件的直接执行，否则编译时必须要进入MASM文件所在的路径才能进行masm,link,debug操作，否则会提示找不到输入文件的提示。有更好的办法是将新加一个文件路径也添加到dosbox的path中，期待勤劳的你们去自己实现。</p></blockquote><h3 id="5、Ubuntu下载文件解压打开之后乱码问题"><a href="#5、Ubuntu下载文件解压打开之后乱码问题" class="headerlink" title="5、Ubuntu下载文件解压打开之后乱码问题"></a>5、Ubuntu下载文件解压打开之后乱码问题</h3><h4 id="1-、convmv"><a href="#1-、convmv" class="headerlink" title="1) 、convmv"></a>1) 、convmv</h4><p>convmv就是更改文件名编码方式的一个工具。比如</p><p>sudo convmv -f gbk -t utf-8 -r –notest /home</p><p>就是将/home目录下原来文件名是gbk编码方式的全部改为utf-8格式的。这里 -f 后面为原来的编码方式，-t 后面是要更改为的编码方式， -r 表示递归形式处理这个目录下面的所有文件， –notest 表示马上执行，而不是仅仅测试而已。另外这命令好像要root才能执行，因此要加上 sudo。</p><h4 id="2-、iconv"><a href="#2-、iconv" class="headerlink" title="2)、iconv"></a>2)、iconv</h4><p>iconv是更改文件编码方式的一个工具：</p><p>sudo iconv -f gbk -t utf-8 -o outfile infile</p><p>-f为原来的编码方式，-t 为输出文件的编码方式， -o表示输出文件名，这利用outfile表示，最后跟上要更改编码方式的文件名sourcefile 。</p><p>通过这两个工具，中文文件乱码的问题终于解决。</p><pre><code>unzip -O GBK &#39;****.zip&#39;  //unzip 的改编编码，Ubuntu默认utf8，而Windows默认GBK</code></pre><h3 id="6、centos安装Nginx"><a href="#6、centos安装Nginx" class="headerlink" title="6、centos安装Nginx"></a>6、centos安装Nginx</h3><h5 id="步骤-1-添加-yum-源"><a href="#步骤-1-添加-yum-源" class="headerlink" title="步骤 1: 添加 yum 源"></a>步骤 1: 添加 yum 源</h5><p>Nginx 不在默认的 yum 源中，可以使用 epel 或者官网的 yum 源，本例使用官网的 yum 源。</p><pre><code>$ sudo rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code></pre><p>安装完 yum 源之后，可以查看一下。</p><pre><code>$ sudo yum repolistLoaded plugins: fastestmirror, langpacksLoading mirror speeds from cached hostfile * base: mirrors.aliyun.com * extras: mirrors.aliyun.com * updates: mirrors.aliyun.comrepo id                          repo name                          statusbase/7/x86_64                    CentOS-7 - Base                    9,911extras/7/x86_64                  CentOS-7 - Extras                    368nginx/x86_64                     nginx repo                           108updates/7/x86_64                 CentOS-7 - Updates                 1,041repolist: 11,428</code></pre><p>可以发现 <code>nginx repo</code> 已经安装到本机了。</p><h5 id="步骤-2-安装"><a href="#步骤-2-安装" class="headerlink" title="步骤 2: 安装"></a>步骤 2: 安装</h5><p>yum 安装 Nginx，非常简单，一条命令。</p><pre><code>$ sudo yum install nginx</code></pre><h5 id="步骤-3-配置-Nginx-服务"><a href="#步骤-3-配置-Nginx-服务" class="headerlink" title="步骤 3: 配置 Nginx 服务"></a>步骤 3: 配置 Nginx 服务</h5><p>设置开机启动</p><pre><code>$ sudo systemctl enable nginx</code></pre><p>启动服务</p><pre><code>$ sudo systemctl start nginx</code></pre><p>停止服务</p><pre><code>$ sudo systemctl restart nginx</code></pre><p>重新加载，因为一般重新配置之后，不希望重启服务，这时可以使用重新加载。</p><pre><code>$ sudo systemctl reload nginx</code></pre><h5 id="步骤-4-打开防火墙端口"><a href="#步骤-4-打开防火墙端口" class="headerlink" title="步骤 4: 打开防火墙端口"></a>步骤 4: 打开防火墙端口</h5><p>默认 CentOS7 使用的防火墙 firewalld 是关闭 http 服务的（打开 80 端口）。</p><pre><code>$ sudo firewall-cmd --zone=public --permanent --add-service=httpsuccess$ sudo firewall-cmd --reloadsuccess</code></pre><p>打开之后，可以查看一下防火墙打开的所有的服务</p><pre><code>$ sudo firewall-cmd --list-servicessh dhcpv6-client http</code></pre><p>步骤5：Nginx默认目录<br>输入命令：</p><pre><code>whereis nginx1</code></pre><p>即可看到类似于如下的内容：</p><pre><code>nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx1</code></pre><blockquote><p>以下是Nginx的默认路径：</p><ul><li><p>Nginx配置路径：/etc/nginx/</p></li><li><p>PID目录：/var/run/nginx.pid</p></li><li><p>错误日志：/var/log/nginx/error.log</p></li><li><p>访问日志：/var/log/nginx/access.log</p></li><li><p>默认站点目录：/usr/share/nginx/html</p></li></ul></blockquote><p>事实上，只需知道Nginx配置路径，其他路径均可在<code>/etc/nginx/nginx.conf</code> 以及<code>/etc/nginx/conf.d/default.conf</code> 中查询到。</p><h3 id="7、nginx详细配置信息和常用命令"><a href="#7、nginx详细配置信息和常用命令" class="headerlink" title="7、nginx详细配置信息和常用命令"></a>7、nginx详细配置信息和常用命令</h3><p>yum安装配置文件在/ect/nginx，现在把两个证书文件复制过来，待会直接配置使用就行了。</p><p>nginx的配置文件是nginx.conf，里面的配置内容有以下，为了容易明白，都加上了注释。</p><pre class=" language-shell"><code class="language-shell"># 运行用户，默认即是nginx，可以不进行设置user  nginx;#Nginx进程，一般设置为和CPU核数一样worker_processes  1;#错误日志存放目录error_log  /var/log/nginx/error.log warn;#进程pid存放位置pid        /var/run/nginx.pid;events {    worker_connections  1024; # 单个后台进程的最大并发数}http {    include       /etc/nginx/mime.types; #文件扩展名与类型映射表    default_type  application/octet-stream; #默认文件类型    #设置日志模式    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '                      '$status $body_bytes_sent "$http_referer" '                      '"$http_user_agent" "$http_x_forwarded_for"';    access_log  /var/log/nginx/access.log  main; #nginx访问日志存放位置    sendfile        on; #开启高效传输模式    #tcp_nopush     on; #减少网络报文段的数量    keepalive_timeout  65; #保持连接的时间，也叫超时时间    #gzip  on; #开启gzip压缩    include /etc/nginx/conf.d/*.conf; #包含的子配置项位置和文件}</code></pre><h5 id="1-、打开里面的default-conf"><a href="#1-、打开里面的default-conf" class="headerlink" title="1)、打开里面的default.conf"></a>1)、打开里面的default.conf</h5><pre class=" language-shell"><code class="language-shell">#设定虚拟主机配置server {  #侦听443端口，这个是ssl访问端口  listen    443 ssl;  #定义使用 访问域名  server_name www.mi-2.top;  #定义服务器的默认网站根目录位置  root /web/www/website/dist;    #设定本虚拟主机的访问日志  access_log  logs/nginx.access.log  main;  # 这些都是腾讯云推荐的配置，直接拿来用就行了，只是修改证书的路径，注意这些路径是相对于/etc/nginx/nginx.conf文件位置  # ssl on; 改成在listen 443 +一个ssl  如: listen 443 ssl;  ssl_certificate 1_XXX.com_bundle.crt;  ssl_certificate_key 2_XXX.com.key;  ssl_session_timeout 5m;  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置  ssl_prefer_server_ciphers on;  #默认请求  location / {       #root /web/www/website/dist;            #定义首页索引文件的名称     # index index.html;     proxy_pass http://127.0.0.1:8080;  }  #静态文件，nginx自己处理  location ~ ^/(images|javascript|js|css|flash|media|static)/ {      #过期30天，静态文件不怎么更新，过期可以设大一点，      #如果频繁更新，则可以设置得小一点。      expires 30d;  }  #禁止访问 .htxxx 文件  #    location ~ /.ht {  #    deny all;  #}}server{  # 80端口是http正常访问的接口  listen 80;  server_name XXX.com;  # 在这里，我做了https全加密处理，在访问http的时候自动跳转到https  rewrite ^(.*) https://$host$1 permanent;}</code></pre><h5 id="2-、nginx日常操作命令"><a href="#2-、nginx日常操作命令" class="headerlink" title="2)、nginx日常操作命令"></a>2)、nginx日常操作命令</h5><blockquote><ul><li>nginx -t 测试配置文件</li><li>nginx -s reload 修改配置后重载生效</li><li>nginx -s reopen 重新打开日志文件</li><li>nginx -s stop 快速停止</li><li>nginx -s quit</li><li>查看nginx进程 ps -ef | grep nginx</li></ul></blockquote><h3 id="8-、nohoup部署springboot项目在服务器后台运行"><a href="#8-、nohoup部署springboot项目在服务器后台运行" class="headerlink" title="8)、nohoup部署springboot项目在服务器后台运行"></a>8)、nohoup部署springboot项目在服务器后台运行</h3><blockquote><p>Linux 运行jar包命令如下：</p><p>方式一：</p><p>java -jar XXX.jar 特点：当前ssh窗口被锁定，可按CTRL + C打断程序运行，或直接关闭窗口，程序退出</p><p>那如何让窗口不锁定？</p><p>方式二</p><p>java -jar XXX.jar &amp; &amp;代表在后台运行。</p><p>特定：当前ssh窗口不被锁定，但是当窗口关闭时，程序中止运行。</p><p>继续改进，如何让窗口关闭时，程序仍然运行？</p><p>方式三</p><p>nohup java -jar XXX.jar &amp; nohup 意思是不挂断运行命令,当账户退出或终端关闭时,程序仍然运行</p><p>当用 nohup 命令执行作业时，缺省情况下该作业的所有输出被重定向到nohup.out的文件中，除非另外指定了输出文件。</p><p>方式四</p><p>nohup java -jar XXX.jar &gt;temp.txt &amp; 解释下 &gt;temp.txt</p><p>command &gt;out.file  </p><p>command &gt;out.file是将command的输出重定向到out.file文件，即输出内容不打印到屏幕上，而是输出到out.file文件中。</p><p>可通过jobs命令查看后台运行任务</p><p>jobs 那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。 如果想将某个作业调回前台控制，只需要 fg + 编号即可。</p></blockquote><pre class=" language-shell"><code class="language-shell">nohup 用途：LINUX命令用法，不挂断地运行命令。   语法：nohup Command [ Arg ... ] [ & ]   描述：nohup 命令运行由 Command 参数和任何相关的 Arg 参数指定的命令，忽略所有挂断（SIGHUP）信号。在注销后使用 nohup 命令运行后台中的程序。要运行后台中的 nohup 命令，添加 & （ 表示“and”的符号）到命令的尾部。   如果不将 nohup 命令的输出重定向，输出将附加到当前目录的 nohup.out 文件中。如果当前目录的 nohup.out 文件不可写，输出重定向到 $HOME/nohup.out 文件中。如果没有文件能创建或打开以用于追加，那么 Command 参数指定的命令不可调用。如果标准错误是一个终端，那么把指定的命令写给标准错误的所有输出作为标准输出重定向到相同的文件描述符。   退出状态：该命令返回下列出口值：126 可以查找但不能调用 Command 参数指定的命令。127 nohup 命令发生错误或不能查找由 Command 参数指定的命令。否则，nohup 命令的退出状态是 Command 参数指定命令的退出状态。nohup命令及其输出文件   nohup命令：如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用nohup命令。该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。nohup就是不挂起的意思( no hang up)。该命令的一般形式为：nohup command &   使用nohup命令提交作业   如果使用nohup命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为nohup.out的文件中，除非另外指定了输出文件：   nohup command > myout.file 2>&1 &   在上面的例子中，输出被重定向到myout.file文件中。  nohup java -jar zdzjar.jar > nohup.out 2>&1 &//关闭进程ps -aux | grep javakill -s 9 xxxxxx代表上一步查出的进程ID可以直接用一句话执行ps aux |grep zdzjar.jar |grep -v grep |awk '{print $2}' |xargs kill -9或者ps -ef|grep -v grep|grep zdzjar.jar | grep java |awk '{print "kill -9 "$2}'|sh</code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回流与重绘</title>
      <link href="/2020/05/06/hui-liu-yu-chong-hui/"/>
      <url>/2020/05/06/hui-liu-yu-chong-hui/</url>
      
        <content type="html"><![CDATA[<h2 id="html-加载时发生了什么"><a href="#html-加载时发生了什么" class="headerlink" title="html 加载时发生了什么"></a>html 加载时发生了什么</h2><blockquote><p><strong>在页面加载时，浏览器把获取到的HTML代码解析成1个DOM树，DOM树里包含了所有HTML标签，包括display:none隐藏，还有用JS动态添加的元素等。浏览器把所有样式(用户定义的CSS和用户代理)解析成样式结构体DOM Tree 和样式结构体组合后构建render tree, render tree类似于DOM tree，但区别很大，因为render tree能识别样式，render tree中每个NODE都有自己的style，而且render tree不包含隐藏的节点(比如display:none的节点，还有head节点)，因为这些节点不会用于呈现，而且不会影响呈现的，所以就不会包含到 render tree中。我自己简单的理解就是DOM Tree和我们写的CSS结合在一起之后，渲染出了render tree。</strong></p></blockquote><h2 id="什么是回流"><a href="#什么是回流" class="headerlink" title="什么是回流"></a>什么是回流</h2><blockquote><p><strong>当render tree中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建。这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候，这时候是一定会发生回流的，因为要构建render tree。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程成为重绘。</strong></p></blockquote><h2 id="什么是重绘"><a href="#什么是重绘" class="headerlink" title="什么是重绘"></a>什么是重绘</h2><blockquote><p><strong>当render tree中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，比如background-color,color之类的,就称为重绘。</strong></p></blockquote><h2 id="区别："><a href="#区别：" class="headerlink" title="区别："></a>区别：</h2><blockquote><p><strong>他们的区别很大：</strong><br> <strong>回流必将引起重绘，而重绘不一定会引起回流。比如：只有颜色改变的时候就只会发生重绘而不会引起回流.当页面布局和几何属性改变时就需要回流;比如：添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变</strong></p></blockquote><h2 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h2><blockquote><p><strong>我们能得知回流比重绘的代价要更高，回流的花销跟render tree有多少节点需要重新构建有关系因为这些机制的存在，所以浏览器会帮助我们优化这些操作，浏览器会维护1个队列，把所有会引起回流、重绘的操作放入这个队列，等队列中的操作到了一定的数量或者到了一定的时间间隔，浏览器就会flush队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。</strong></p></blockquote><h2 id="但是靠浏览器不如靠自己，我们可以改变一些写法减少回流和重绘"><a href="#但是靠浏览器不如靠自己，我们可以改变一些写法减少回流和重绘" class="headerlink" title="但是靠浏览器不如靠自己，我们可以改变一些写法减少回流和重绘"></a>但是靠浏览器不如靠自己，我们可以改变一些写法减少回流和重绘</h2><blockquote><p><strong>比如改变样式的时候，不去改变他们每个的样式，而是直接改变className 就要用到cssText 但是要注意有一个问题，会把原有的cssText清掉，比如原来的style中有’display:none;’，那么执行完上面的JS后，display就被删掉了。为了解决这个问题，可以采用cssText累加的方法，但是IE不支持累加，前面添一个分号可以解决。还有添加节点的时候比如要添加一个div里面有三个子元素p，如果添加div再在里面添加三次p，这样就触发很多次回流和重绘，我们可以用cloneNode(true or false) 来，一次性把要添加的都克隆好再appened就好了</strong></p></blockquote><blockquote><p><strong>以上纯属个人理解，有更好的建议可以下面评论或者给我留言，我会努力的改进的哟!</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue路由学习</title>
      <link href="/2020/04/24/vue/"/>
      <url>/2020/04/24/vue/</url>
      
        <content type="html"><![CDATA[<blockquote><p>刚接触vue的前端路由,和后端的controller有点类似,但是不需要刷新界面的机制又让我想起来了ajax,ajax是动态渲染,而前端路由可以随便拿数据展示.个人感觉前端路由很强大,所以这方面的知识必须掌握,特此记录.</p><p>这里面设计一些es6语法的导入导出,这里就不细讲了,说一下export  default,就是不指定对象名将对象导出,</p><p>让导入者自定义对象名.</p></blockquote><h3 id="这里记录一个简单的demo-自己详解一下里面的具体内容以及流程"><a href="#这里记录一个简单的demo-自己详解一下里面的具体内容以及流程" class="headerlink" title="这里记录一个简单的demo,自己详解一下里面的具体内容以及流程"></a>这里记录一个简单的demo,自己详解一下里面的具体内容以及流程</h3><h4 id="1-、main-js"><a href="#1-、main-js" class="headerlink" title="1)、main.js"></a>1)、main.js</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router/index'</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token operator">/</span> <span class="token operator">/</span>阻止启动生产消息，常用作指令<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//es6箭头函数语法 h是参数,而h(App)是返回值,这里的render会直接渲染还回组件</span>  router<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//$mount('#app')等价于el: '#app',事实上后者会被vue源码加载渲染变成前者.</span></code></pre><p>程序入口,这里有个最重要的东西vue实例.</p><p>查了一些语法,一些人故意炫技将东西说的天花乱坠,本人看了一点recat基础,这边的render语法其实是一种简写:</p><p>等价于</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  ​            el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>​            components<span class="token punctuation">:</span> <span class="token punctuation">{</span>​                <span class="token string">"App"</span><span class="token punctuation">:</span> App  ​            <span class="token punctuation">}</span>​        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>并自动将<span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span>加载在<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    即<span class="token punctuation">:</span><span class="token operator">&lt;</span>div id <span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>App<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></code></pre><h4 id="2-、App-vue"><a href="#2-、App-vue" class="headerlink" title="2)、App.vue"></a>2)、App.vue</h4><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"app"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>replace相当于HTML5的history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>并不会入栈操作<span class="token punctuation">,</span>直接渲染<span class="token punctuation">,</span>浏览器没有返回箭头<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">'/home'</span> tag<span class="token operator">=</span><span class="token string">"button"</span> replace<span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">'/about'</span> tag<span class="token operator">=</span><span class="token string">"button"</span> replace<span class="token operator">></span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">></span>    <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"homeClick"</span><span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"aboutClick"</span><span class="token operator">></span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>view<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>占位显示路由<span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">homeClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//通过代码修改路由   $router是属于router插件内部的</span>      <span class="token comment" spellcheck="true">//this.$router.push('/home'); //入栈方式</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//替换方式</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">aboutClick</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'/about'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>App.vue可以理解为主组件,界面由多个组件组成,render函数会直接渲染并加载主组件.</p><h4 id="3-、router-index-js"><a href="#3-、router-index-js" class="headerlink" title="3)、router/index.js"></a>3)、router/index.js</h4><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//配置路由相关的信息</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span>  <span class="token comment" spellcheck="true">//导入vue插件  导入之前安装</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span>       <span class="token comment" spellcheck="true">//导入vue  vue来安装vue-router</span><span class="token comment" spellcheck="true">//以下为需要渲染的组件</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">'../components/Home.vue'</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">'../components/About.vue'</span><span class="token comment" spellcheck="true">//1.vue的use安装这个插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.创建routes对象参数</span><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        redirect<span class="token punctuation">:</span> <span class="token string">'/home'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> Home    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/about'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//导出对象并设置为HTML5的history模式</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">,</span>    mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>路由配置文件,设置路由映射规则以及让vue加载这个组件.</p><h4 id="4-、components"><a href="#4-、components" class="headerlink" title="4)、components:"></a>4)、components:</h4><p>组件.界面由多个组件组成</p><h6 id="About-vue"><a href="#About-vue" class="headerlink" title="About.vue"></a>About.vue</h6><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h2<span class="token operator">></span>我是关于<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>        <span class="token operator">&lt;</span>p<span class="token operator">></span>关于<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>             name <span class="token punctuation">:</span> <span class="token string">'about'</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//生命周期 - 创建完成（访问当前this实例）</span>    <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//生命周期 - 挂载完成（访问DOM元素）</span>    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token comment" spellcheck="true">/* @import url(); 引入css类 */</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h6 id="Home-vue"><a href="#Home-vue" class="headerlink" title="Home.vue"></a>Home.vue</h6><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>  <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>h2<span class="token operator">></span>我是首页<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>首页<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token punctuation">{</span>       name<span class="token punctuation">:</span> <span class="token string">'home'</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//生命周期 - 创建完成（访问当前this实例）</span> <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//生命周期 - 挂载完成（访问DOM元素）</span> <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token comment" spellcheck="true">/* @import url(); 引入css类 */</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><p>大致运行流程:</p><p><img src="https://mi-2.oss-cn-hangzhou.aliyuncs.com/public/blog/vue.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6笔记之函数</title>
      <link href="/2020/04/09/es6-han-shu/"/>
      <url>/2020/04/09/es6-han-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6和ES5的区别："><a href="#ES6和ES5的区别：" class="headerlink" title="ES6和ES5的区别："></a>ES6和ES5的区别：</h2><ol><li><strong>变量</strong>  </li><li><strong>函数</strong></li><li><strong>数组</strong></li><li><strong>字符串</strong></li><li><strong>面向对象</strong></li><li><strong>Promise</strong></li><li><strong>generator</strong></li><li><strong>模块化</strong></li></ol><hr><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><strong>ES6：箭头函数</strong></p><ol><li><p><strong>如果只有一个参数，（）可以省</strong></p></li><li><p><strong>如果只有一条语句，{}可以省</strong></p></li><li><p><strong>函数的参数: 参数扩展/展开</strong></p></li><li><p><strong>默认参数</strong></p><pre><code>//通常函数的定义方法var fn1 = function(a, b) {  return a + b}//使用ES6箭头函数语法定义函数，将原函数的“function”关键字和函数名都删掉，并使用“=&gt;”连接参数列表和函数体。var fn1 = (a, b) =&gt; {  return a + b}// 无参var fn1 = () =&gt; {}// 单个参数  var fn2 = function(a) {}  var fn2 = a =&gt; {}// 多个参数var fn3 = function(a, b) {}var fn3 = (a, b) =&gt; {}</code></pre></li></ol><h2 id="参数扩展"><a href="#参数扩展" class="headerlink" title="参数扩展"></a>参数扩展</h2><ol><li><p><strong>收集剩余参数</strong></p><pre><code>function show(a,b,...args){console.log(args); //[8,1,2,5,3,4];}show(5,6,8,1,2,5,3,4);</code></pre><blockquote><p><strong>参数扩展必须写在最后一个参数的位置 …args</strong></p></blockquote></li><li><p><strong>扩展运算符… 展开数组</strong></p><pre><code>let arr1 = [1,2,3];let arr2 = [4,5,6];let arr3 = [...arr1,...arr2];console.log(arr3); //[1,2,3,4,5,6]</code></pre><blockquote><p><strong>展开后的效果，跟直接把数组内容写在这一样的</strong></p></blockquote></li><li><p><strong>默认参数</strong></p><pre><code>//ES6可以这样设置默认参数值function show(a,b = 5,c = 12){console.log(a,b,c); };show(99); //99,5,12show(5,2,1); // 5,2,1</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 语法 </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6笔记之变量</title>
      <link href="/2020/04/09/es6-bi-ji-zhi-bian-liang/"/>
      <url>/2020/04/09/es6-bi-ji-zhi-bian-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6和ES5的区别："><a href="#ES6和ES5的区别：" class="headerlink" title="ES6和ES5的区别："></a>ES6和ES5的区别：</h2><ol><li><strong>变量</strong>  </li><li><strong>函数</strong></li><li><strong>数组</strong></li><li><strong>字符串</strong></li><li><strong>面向对象</strong></li><li><strong>Promise</strong></li><li><strong>generator</strong></li><li><strong>模块化</strong></li></ol><hr><h2 id="变量的改进"><a href="#变量的改进" class="headerlink" title="变量的改进"></a>变量的改进</h2><p><strong>var:</strong></p><ol><li><p><strong>可以重复使用 (可以反复定义一个变量而且不会报错)</strong></p></li><li><p><strong>无法限制修改 (也就是没有所谓的常量定义)</strong></p></li><li><p><strong>没有块级作用域 (块级作用域在C,java,c#等这类静待语言中是很重要的一个点)</strong></p><pre><code>// Demo1:用var定义的变量可以重复使用，所以就会出现以下的情况var a = 12;var a = 5;console.log(a); // 5// Demo2:用var定义的变量只有函数作用域和全局作用域并没有块级作用域，所以就会出现以下的情况if (ture) {var a = 5;}console.log(a); // 5// Demo3:由于var定义的变量没有块级作用域，所以在执行一些异步操作时会发生以下的情况for (var i = 0; i &lt; 5; i++) {setTimeout(function () {console.log(i); //打印5个5}, 500); }</code></pre></li></ol><hr><p><strong>ES6新增关键字：let:</strong></p><ol><li><p><strong>不可以重复使用 (不可以重复定义同一个变量)</strong></p></li><li><p><strong>变量–可以修改</strong></p></li><li><p><strong>有块级作用域</strong></p><pre><code>// Demo1:用let定义的变量不可以重复使用，所以就会出现以下的情况var a = 12;var a = 5;console.log(a); // 报错--a重复定义// Demo2:用let定义的变量有块级作用域，所以就会出现以下的情况if (ture) {var a = 5;}console.log(a); // 报错--a未定义// Demo3:由于let定义的变量有块级作用域，所以在执行一些异步操作时会发生以下的情况for (let i = 0; i &lt; 5; i++) {setTimeout(function () {console.log(i); //0 1 2 3 4}, 500); }</code></pre></li></ol><p><strong>ES6新增关键字：const:</strong></p><ol><li><strong>不可以重复使用 (不可以重复定义同一个变量)</strong></li><li><strong>常量–不可以修改</strong></li><li><strong>有块级作用域</strong><pre><code>const a = 5;a = 6;  //当尝试改变常量的值时会发生报错提示</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中数组操作相关方法</title>
      <link href="/2020/04/07/js-zhong-shu-zu-fang-fa/"/>
      <url>/2020/04/07/js-zhong-shu-zu-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="js常见数组方法："><a href="#js常见数组方法：" class="headerlink" title="js常见数组方法："></a>js常见数组方法：</h2><ol><li><p><strong>join()就是把数组转换成字符串，然后给他规定个连接字符，默认不传参的是逗号,返回一个字符串</strong></p><pre><code>var arr = [1,2,3];console.log(arr.join()); 　　　　// 1,2,3console.log(arr.join(&quot;-&quot;)); 　　// 1-2-3console.log(arr); 　　　　　　　　// [1, 2, 3]（原数组不变）</code></pre></li><li><p><strong>push()和pop(),push():  把里面的内容添加到数组末尾，并返回修改后的长度。pop()：移除数组最后一项，返回移除的那个值，减少数组的length.</strong></p><pre><code>var arr = [&quot;Lily&quot;,&quot;lucy&quot;,&quot;Tom&quot;];var count = arr.push(&quot;Jack&quot;,&quot;Sean&quot;);console.log(count); 　　　　　　　　　　// 5console.log(arr); 　　　　　　　　　　　// [&quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;, &quot;Jack&quot;, &quot;Sean&quot;]var item = arr.pop();console.log(item); 　　　　　　　　　　 // Seanconsole.log(arr); 　　　　　　　　　　  // [&quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;, &quot;Jack&quot;]</code></pre></li><li><p><strong>shift() 和 unshift()   (和上面的push，pop相反，针对第一项内容);  shift()：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined 。unshift():将参数添加到原数组开头，并返回数组的长度 。</strong></p><pre><code>var arr = [&quot;Lily&quot;,&quot;lucy&quot;,&quot;Tom&quot;];var count = arr.unshift(&quot;Jack&quot;,&quot;Sean&quot;);console.log(count); 　　　　　　　　　　　　　　// 5console.log(arr); 　　　　　　　　　　　　　　　//[&quot;Jack&quot;, &quot;Sean&quot;, &quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;]var item = arr.shift();console.log(item); 　　　　　　　　　　　　　　// Jackconsole.log(arr); 　　　　　　　　　　　　　　 // [&quot;Sean&quot;, &quot;Lily&quot;, &quot;lucy&quot;, &quot;Tom&quot;]</code></pre></li><li><p><strong>sort()：将数组里的项从小到大排序,sort()方法比较的是字符串，没有按照数值的大小对数字进行排序，要实现这一点，就必须使用一个排序函数;这个方法会直接改变原数组的排序顺序。</strong></p><pre><code>function sortNumber(a,b){　　return a - b}arr = [13, 24, 51, 3]; console.log(arr.sort()); 　　　　　　　　　　// [13, 24, 3, 51] console.log(arr.sort(sortNumber)); 　　　　// [3, 13, 24, 51](数组被改变)</code></pre></li><li><p><strong>reverse()：反转数组项的顺序. 反数组会发生改变</strong></p><pre><code>var arr = [13, 24, 51, 3];console.log(arr.reverse()); 　　　　　　　　//[3, 51, 24, 13]console.log(arr); 　　　　　　　　　　　　　　//[3, 51, 24, 13](原数组改变)</code></pre></li><li><p><strong>concat() ：将参数添加到原数组中。这个方法会先创建当前数组一个副本，然后将接收到的参数添加到这个副本的末尾，最后返回新构建的数组。在没有给 concat()方法传递参数的情况下，它只是复制当前数组并返回副本。</strong></p><pre><code>var arr = [1,3,5,7];var arrCopy = arr.concat(9,[11,13]);console.log(arrCopy); 　　　　　　　　　　　　//[1, 3, 5, 7, 9, 11, 13]console.log(arr); 　　　　　　　　　　　　　　// [1, 3, 5, 7](原数组未被修改)</code></pre></li><li><p><strong>slice()：返回从原数组中指定开始下标到结束下标之间的项组成的新数组。slice()方法可以接受一或两个参数，即要返回项的起始和结束位置。在只有一个参数的情况下， slice()方法返回从该参数指定位置开始到当前数组末尾的所有项。如果有两个参数，该方法返回起始和结束位置之间的项——但不包括结束位置的项。原数组不会发生改变,会返回一个满足条件的新数组</strong></p><pre><code>var arr = [1,3,5,7,9,11];var arrCopy = arr.slice(1);var arrCopy2 = arr.slice(1,4);var arrCopy3 = arr.slice(1,-2);var arrCopy4 = arr.slice(-4,-1);  //当出现负数时，将负数加上数组长度的值（6）来替换该位置的数，因此就是从2开始到5（不包括）的子数组。 console.log(arr); 　　　　　　　　　　　　　　//[1, 3, 5, 7, 9, 11](原数组没变)console.log(arrCopy); 　　　　　　　　　　　 //[3, 5, 7, 9, 11]console.log(arrCopy2); 　　　　　　　　　　　//[3, 5, 7]console.log(arrCopy3); 　　　　　　　　　　　//[3, 5, 7]console.log(arrCopy4); 　　　　　　　　　　　//[5, 7, 9]</code></pre></li><li><p><strong>splice()：删除、插入和替换。这个方法十分强大，是对原数组进行改动</strong></p><pre><code>var arr = [1,3,5,7,9,11];var arrRemoved = arr.splice(0,2); //删除：指定 2 个参数：要删除元素的下标的位置和要删除的项数。console.log(arr); 　　　　　　　　　　　　　　　//[5, 7, 9, 11]console.log(arrRemoved); 　　　　　　　　　　　//[1, 3]var arrRemoved2 = arr.splice(2,0,4,6); //插入：可以向指定位置插入任意数量的项，只需提供 3 个参数：起始位置、 0（要删除的项数）和要插入的项,后面4,6就是要插入的两项。console.log(arr); 　　　　　　　　　　　　　　　// [5, 7, 4, 6, 9, 11]console.log(arrRemoved2); 　　　　　　　　　　// []var arrRemoved3 = arr.splice(1,1,2,4); //替换：可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数：起始位置、要删除的项数和要插入的任意数量的项。插入的项数不必与删除的项数相等。console.log(arr); 　　　　　　　　　　　　　　　// [5, 2, 4, 4, 6, 9, 11]console.log(arrRemoved3); 　　　　　　　　　　//[7]</code></pre></li><li><p><strong>indexOf()和 lastIndexOf()；indexOf()：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。默认从数组的开头（位置 0）开始向后查找。lastIndexOf：接收两个参数：要查找的项和（可选的）表示查找起点位置的索引。默认从数组的末尾开始向前查找。</strong></p><pre><code>var arr = [1,3,5,7,7,5,3,1];console.log(arr.indexOf(5)); 　　　　　　//2console.log(arr.lastIndexOf(5)); 　　　 //5console.log(arr.indexOf(5,2)); 　　　　 //2console.log(arr.lastIndexOf(5,4)); 　　//2console.log(arr.indexOf(&quot;5&quot;)); 　　　　 //-1</code></pre></li><li><p><strong>forEach()：对数组进行遍历循环，对数组中的每一项运行给定函数。这个方法没有返回值。参数都是function类型，默认有传参，参数分别为：遍历的数组item；元素对应的数组索引，数组本身。</strong></p><pre><code>var arr = [1, 2, 3, 4, 5];arr.forEach(function(item, index, a){ //item代表遍历这个数组里面的每一项,index是下表索引,a是这个被遍历的数组本身console.log(item + &#39;|&#39; + index + &#39;|&#39; + (a === arr));});// 输出为：// 1|0|true// 2|1|true// 3|2|true// 4|3|true// 5|4|true</code></pre></li><li><p><strong>every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。</strong></p><pre><code>var arr = [1, 2, 3, 4, 5];var arr2 = arr.every(function(item) {return item &lt; 10;}); console.log(arr2); 　　　　　　　　//truevar arr3 = arr.every(function(item) {return item &lt; 3;}); console.log(arr3); 　　　　　　　　// false</code></pre></li><li><p><strong>some()：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</strong></p><pre><code>var arr = [1, 2, 3, 4, 5];var arr2 = arr.some(function(item) {return item &lt; 3;}); console.log(arr2); 　　　　　　　　//truevar arr3 = arr.some(function(item) {return item &lt; 1;}); console.log(arr3); 　　　　　　　　// false</code></pre></li><li><p><strong>map()：指“映射”，对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。</strong></p><pre><code>var arr = [1, 2, 3, 4, 5];var arr2 = arr.map(function(item){return item*item;});console.log(arr2); 　　　　　　　　//[1, 4, 9, 16, 25]</code></pre></li><li><p><strong>filter()：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。</strong></p><pre><code>var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];var arr2 = arr.filter(function(item, index) {return index % 3 === 0 || item &gt;= 8; //只有为true才会返回当前项，最后组成一个新数组返回}); console.log(arr2); 　　　　　　　　//[1, 4, 7, 8, 9, 10]</code></pre></li><li><p><strong>reduce():”汇总”方法,参数是一个函数，函数里默认有4个参数可用;init 表示初始值。index 表示当前正在处理的数组元素的索引，若提供 init 值，则索引为0开始，否则索引为1开始；cur 表示当前正在处理的数组元素；prev 表示上一次调用回调时的返回值，或者初始值 init;常用的参数只有两个：prev 和 cur。</strong></p><pre><code>//计算数组中每个元素出现的次数let names = [&#39;Alice&#39;, &#39;Bob&#39;, &#39;Tiff&#39;, &#39;Bruce&#39;, &#39;Alice&#39;];let nameNum = names.reduce((prev,cur)=&gt;{ if(cur in prev){   pre[cur]++ }else{   pre[cur] = 1  } return prev},{})console.log(nameNum); //{Alice: 2, Bob: 1, Tiff: 1, Bruce: 1}</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js中字符串操作相关方法</title>
      <link href="/2020/04/07/js-de-zi-fu-chuan-fang-fa/"/>
      <url>/2020/04/07/js-de-zi-fu-chuan-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="JS字符串常用方法总结："><a href="#JS字符串常用方法总结：" class="headerlink" title="JS字符串常用方法总结："></a>JS字符串常用方法总结：</h2><ol><li><p><strong>toLowerCase(): 把字符串转为小写，返回新的字符串。</strong></p><pre><code>var str=&quot;Hello World&quot;;var str1=str.toLowerCase();console.log(str); //Hello Worldconsole.log(str1); //hello world</code></pre></li><li><p><strong>toUpperCase(): 把字符串转为大写，返回新的字符串。</strong></p><pre><code>var str=&quot;hello world&quot;;var str1=str.toUpperCase();console.log(str); //hello worldconsole.log(str1); //HELLO WORLD</code></pre></li><li><p><strong>charAt(): 返回指定下标位置的字符。如果index不在0-str.length(不包含str.length)之间，返回空字符串。</strong></p><pre><code>var str=&quot;hello world&quot;;var str1=str.charAt(6);console.log(str1); //w</code></pre></li><li><p><strong>charCodeAt(): 返回指定下标位置的字符的unicode编码,这个返回值是 0 - 65535 之间的整数。如果index不在0-str.length(不包含str.length)之间，返回NaN。</strong></p><pre><code>var str=&quot;hello world&quot;;var str1=str.charCodeAt(1);var str2=str.charCodeAt(-2); //NaNconsole.log(str1); //101</code></pre></li><li><p><strong>indexOf(): 返回某个指定的子字符串在字符串中第一次出现的位置，indexOf()方法对大小写敏感，如果子字符串没有找到，返回-1。第二个参数表示从哪个下标开始查找，没有写则默认从下标0开始查找。</strong></p><pre><code>var str=&quot;Hello World&quot;;var str1=str.indexOf(&quot;o&quot;);var str2=str.indexOf(&quot;world&quot;);var str3=str.indexOf(&quot;o&quot;, 5);console.log(str1); //4 默认只找第一个关键字位置，从下标0开始查找console.log(str2); //-1 没有找到console.log(str3); //7</code></pre></li><li><p><strong>lastIndexOf()方法对大小写敏感，如果子字符串没有找到，返回-1。第二个参数表示从哪个下标开始查找，没有写则默认从最后一个字符处开始查找。</strong></p><pre><code>var str=&quot;Hello World&quot;;var str1=str.lastIndexOf(&quot;o&quot;);var str2=str.lastIndexOf(&quot;world&quot;);var str3=str.lastIndexOf(&quot;o&quot;, 6);console.log(str1); //7console.log(str2); //-1console.log(str3); //4</code></pre></li><li><p><strong>slice(): 返回字符串中提取的子字符串。</strong></p><pre><code>var str=&quot;Hello World&quot;;var str1=str.slice(2); //如果只有一个参数，则提取开始下标到结尾处的所有字符串var str2=str.slice(2,7); //两个参数，提取下标为2，到下标为7但不包含下标为7的字符串var str3=str.slice(-7,-2); //如果是负数，-1为字符串的最后一个字符。提取从下标-7开始到下标-2但不包含下标-2的字符串。前一个数要小于后一个数，否则返回空字符串console.log(str1); //llo Worldconsole.log(str2); //llo Wconsole.log(str3); //o Wor</code></pre></li><li><p><strong>substring(): 提取字符串中介于两个指定下标之间的字符。</strong></p><pre><code>var str=&quot;Hello World&quot;;var str1=str.substring(2); //如果只有一个参数，则提取开始下标到结尾处的所有字符串var str2=str.substring(2,2);var str3=str.substring(2,7);//两个参数，提取下标为2，到下标为7但不包含下标为7的字符串console.log(str1); //llo Worldconsole.log(str2); //如果两个参数相等，返回长度为0的空串console.log(str3); //llo W</code></pre></li><li><p><strong>substr(): 返回从指定下标开始指定长度的的子字符串</strong></p><pre><code>var str=&quot;Hello World&quot;;var str1=str.substr(1)var str2=str.substr(1,3);var str3=str.substr(-3,2);console.log(str1); //ello World console.log(str2); //ellconsole.log(str3); //rl</code></pre></li><li><p><strong>split(): 把字符串分割成字符串数组。</strong></p><pre><code>var str=&quot;AA BB CC DD&quot;;var string1=&quot;1:2:3:4:5&quot;;var str1=str.split(&quot;&quot;);//如果把空字符串 (&quot;&quot;)用作分割符，那么字符串的每个字符之间都会被分割var str2=str.split(&quot; &quot;); //以空格为分隔符var str3=str.split(&quot;&quot;,4); //4指定返回数组的最大长度var str4=string1.split(&quot;:&quot;);console.log(str1); // [&quot;A&quot;, &quot;A&quot;, &quot; &quot;, &quot;B&quot;, &quot;B&quot;, &quot; &quot;, &quot;C&quot;, &quot;C&quot;, &quot; &quot;, &quot;D&quot;, &quot;D&quot;]console.log(str2); //[&quot;AA&quot; &quot;BB&quot; &quot;CC&quot; &quot;DD&quot;]console.log(str3); //[&quot;A&quot;, &quot;A&quot;, &quot; &quot;, &quot;B&quot;]console.log(str4); // [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;]</code></pre></li><li><p><strong>replace(): 在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</strong></p><pre><code>var str=&quot;hello WORLD&quot;;var reg=/o/ig; //o为要替换的关键字，不能加引号，否则替换不生效，i忽略大小写，g表示全局查找。var str1=str.replace(reg,&quot;**&quot;)console.log(str1); //hell** W**RLD</code></pre></li><li><p><strong>match(): 返回所有查找的关键字内容的数组</strong></p><pre><code>var str=&quot;To be or not to be&quot;;var reg=/to/ig;var str1=str.match(reg);console.log(str1); //[&quot;To&quot;, &quot;to&quot;]console.log(str.match(&quot;Hello&quot;)); //null</code></pre></li><li><p><strong>repeat()方法返回一个新字符串，表示将原字符串重复n次。</strong></p><pre><code>&#39;x&#39;.repeat(3) // &quot;xxx&quot;&#39;hello&#39;.repeat(2) // &quot;hellohello&quot;&#39;na&#39;.repeat(0) // &quot;&quot;</code></pre></li><li><p><strong>ES2017 引入了字符串补全长度的功能。如果某个字符串不够指定长度，会在头部或尾部补全。padStart()用于头部补全，padEnd()用于尾部补全。</strong></p><pre><code>&#39;x&#39;.padStart(5, &#39;ab&#39;) // &#39;ababx&#39;&#39;x&#39;.padStart(4, &#39;ab&#39;) // &#39;abax&#39;&#39;x&#39;.padEnd(5, &#39;ab&#39;) // &#39;xabab&#39;&#39;x&#39;.padEnd(4, &#39;ab&#39;) // &#39;xaba&#39;</code></pre><blockquote><p><strong>padStart()和padEnd()一共接受两个参数，第一个参数是字符串补全生效的最大长度，第二个参数是用来补全的字符串。如果原字符串的长度，等于或大于最大长度，则字符串补全不生效，返回原字符串。如果省略第二个参数，默认使用空格补全长度。</strong></p></blockquote></li><li><p><strong>ES2019 对字符串实例新增了trimStart()和trimEnd()这两个方法。它们的行为与trim()一致，trimStart()消除字符串头部的空格，trimEnd()消除尾部的空格。它们返回的都是新字符串，不会修改原始字符串。</strong></p><pre><code>const s = &#39;  abc  &#39;;s.trim() // &quot;abc&quot; 去除前后所有的空格s.trimStart() // &quot;abc  &quot; s.trimEnd() // &quot;  abc&quot;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>watch-computed-methods之间的对比</title>
      <link href="/2020/04/07/san-da-ji-suan-bi-jiao/"/>
      <url>/2020/04/07/san-da-ji-suan-bi-jiao/</url>
      
        <content type="html"><![CDATA[<h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><ol><li><strong>computed属性结果会被缓存,除非依赖的响应式属性发生变化才会重新计算,主要当作属性来使用</strong><pre><code>//这意味着下面的计算属性将不再更新，因为Date.now()不是响应式依赖：computed:{  nowTime(){   return Date.now();}}</code></pre></li><li><strong>顾名思义,计算属性一般用于属性的计算,有些属性需要一定计算后才能展示给客户看，这个时候就需要用的computed就可以很好的解决</strong><pre><code>&lt;div id=&quot;example&quot;&gt;{{ message.split('').reverse().join('') }}&lt;/div&gt;</code></pre><blockquote><p><strong>如果不用计算属性，那么就如上面一样用mastuach语法会让结构看来臃肿不够清晰</strong></p></blockquote><pre><code> &lt;div id=&quot;example&quot;&gt;   {{ reversedMessage }} &lt;/div&gt; //如果需要详细看reversedMessage只需去computed里面看它的具体实现即可 var vm = new Vue({   el: &#39;#example&#39;,   data: {     message: &#39;Hello&#39;   },   computed: {     reversedMessage: function () {       return this.message.split(&#39;&#39;).reverse().join(&#39;&#39;);     }   } })</code></pre></li><li><strong>计算属性默认时getter方法,如果你需要也可以给该计算属性设置一个setter方法</strong><pre><code>computed: {  fullMessage:{    //getter    get(){      return this.message + &#39;-&#39; + &#39;Smile&#39;;    }    //setter    set(newValue){      this.message = newValue;    }  }   }</code></pre></li></ol><h2 id="methods"><a href="#methods" class="headerlink" title="methods"></a>methods</h2><ol><li><strong>methods方法代表一个具体的操作，主要用以书写业务逻辑</strong></li><li><strong>methods和computed最大的差别就在于methods不会缓存,所以如果用methods代替computed的话，那么调用了多少次就执行了多少次，那么可想而知性能是多大的浪费</strong><pre><code>//下面假设已经有了计算属性和方法，返回的结果都完全一样，但是计算属性在没有改变//响应式属性时只会调用一次，而方法调用了多少次就执行了多少次&lt;div id=&quot;example&quot;&gt;  {{ reversedMessage }} //计算属性  {{ reversedMessage }} //计算属性  {{ reversedMessage }} //计算属性  {{ methodMessage }} //methods  {{ methodMessage }} //methods  {{ methodMessage }} //methods&lt;/div&gt;</code></pre></li></ol><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><ol><li><strong>虽然计算属性在大多数情况下更合适，但有时候也需要一个自定义的watcher。这是为什么Vue通过watch选项提供一个更通用的方法，来响应数据的变化。当你想要在数据变化响应时，执行异步操作或开销较大的操作，这是很有用的</strong></li><li><strong>主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑；可以看作时<code>computed</code>和<code>methods</code>的结合体</strong><pre><code>&lt;template&gt;&lt;div&gt;  &lt;p&gt;obj.a: {{obj.a}}&lt;/p&gt;  &lt;p&gt;obj.a: &lt;input type=&quot;text&quot; v-model=&quot;obj.a&quot;&gt;&lt;/p&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: &#39;index&#39;,  data(){      return{          obj:{              a:&#39;初始值&#39;          }      }  },  watch: {      obj: {          handler(newVal, objVal) {             // if(newVal.obj || objVal.obj != objVal.obj){              //    console.log(22);    //控制台并没有打印   监测为对象的时候，newVal == oldVal        //      }                    console.log(33)    //打印为33          },          deep:true      }  }}&lt;/script&gt;</code></pre><blockquote><p><strong>对象和数组都是引用类型，引用类型变量存的是地址，地址没有变，所以不会触发watch。这时我们需要进行深度监听，就需要加上一个属性 deep，值为 true</strong></p></blockquote></li></ol><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><ol><li><strong>watch用于观察和监听页面上的vue实例，当你需要在数据变化响应时，执行异步操作，或高性能消耗的操作，那么watch为最佳选择。</strong></li><li><strong>computed可以关联多个实时计算的对象，当这些对象中的其中一个改变时都会触发这个属性具有缓存能力，所以只有当数据再次改变时才会重新渲染，否则就会直接拿取缓存中的数据.</strong></li><li><strong>methods方法表示一个具体的操作，主要书写业务逻辑。</strong><br>以上纯属个人理解，有更好的建议可以下面评论或者给我留言，我会努力的改进的哟!</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的组件化开发</title>
      <link href="/2020/04/05/vue-zu-jian-hua/"/>
      <url>/2020/04/05/vue-zu-jian-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="vue的组件化"><a href="#vue的组件化" class="headerlink" title="vue的组件化"></a>vue的组件化</h2><blockquote><p>组件化是Vue的精髓，Vue就是由一个一个的组件构成的,形成一颗庞大的组件树。Vue的组件化设计到的内容又非常多，因此在这里阐述一下个人对Vue的组件化的理解。</p></blockquote><h2 id="组件的分类"><a href="#组件的分类" class="headerlink" title="组件的分类"></a>组件的分类</h2><ol><li><strong>完全公共组件和业务逻辑完全不相关的组件</strong></li><li><strong>和业务逻辑相关但多页面可以多次复用的组件</strong></li><li><strong>只和每个页面相关的子组件</strong></li></ol><blockquote><p>上面三种类型我个人喜欢抽出三个文件夹来存放</p></blockquote><h2 id="组件化和模块化的区别"><a href="#组件化和模块化的区别" class="headerlink" title="组件化和模块化的区别"></a>组件化和模块化的区别</h2><ol><li><strong>组件化：是从UI界面进行划分的——前端的组件化可以方便 UI界面的复用</strong></li><li><strong>模块化：是从代码逻辑的角度进行划分的——方便后台代码的分层开发，保证每个功能模块的职能单一。</strong></li></ol><h2 id="组件化的具体实例"><a href="#组件化的具体实例" class="headerlink" title="组件化的具体实例:"></a>组件化的具体实例:</h2><pre><code>&lt;template&gt;  &lt;div class=&quot;nav-bar&quot;&gt;    &lt;div class=&quot;left&quot;&gt;&lt;slot name=&quot;left&quot;&gt;&lt;/slot&gt;&lt;/div&gt;    &lt;div class=&quot;center&quot;&gt;&lt;slot name=&quot;center&quot;&gt;&lt;/slot&gt;&lt;/div&gt;    &lt;div class=&quot;right&quot;&gt;&lt;slot name=&quot;right&quot;&gt;&lt;/slot&gt;&lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;  export default {    name: &quot;NavBar&quot;  }&lt;/script&gt;&lt;style scoped&gt;  .nav-bar {    display: flex;    height: 44px;    line-height: 44px;    text-align: center;    box-shadow: 0 1px 1px rgba(100,100,100,.1);  }  .left, .right {    width: 60px;  }  .center {    flex: 1;  }&lt;/style&gt;</code></pre><blockquote><p><strong>如上面代码是我个人封装的一个navBar，头部导航条，在很多项目中都是用的上的,这就属性和业务逻辑完全不相关的组件，很多页面都用的上，一份代码多次复用，这也是我认为组件化最大的特点，复用性!</strong></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><blockquote><p><strong>模块之间需要考虑，模块之间页面跳转、数据传递、初始化处理。组件化是工程分为各个模块，各个模块之间相互解耦，独立起来可编译调试，合成一个工程需要协作、同步。以上纯属个人理解，有更好的建议可以下面评论或者给我留言，我会努力的改进的哟!</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue的生命周期</title>
      <link href="/2020/04/03/vue-zhong-de-sheng-ming-zhou-qi/"/>
      <url>/2020/04/03/vue-zhong-de-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<p> <strong>首先，每个Vue实例在被创建之前都要经过一系列的初始化到销毁的过程,这个过程就是vue的生命周期。直接上一张官网的图:</strong><br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1585920841526&di=bf9f32b9c44984d8a05c128859c7a410&imgtype=0&src=http%3A%2F%2Fwww.pianshen.com%2Fimages%2F213%2Ff8341462947cd6c3e04e0bdbb324b2e5.png" alt="vue"><br> <strong>多的我也不再赘述我就直接说说我对每个阶段的钩子函数的理解,全部的钩子函数我先列出就和我列出的排列顺序一样，这也其实是它们的执行时机:</strong></p><ul><li><strong>beforeCreate</strong></li><li><strong>created</strong></li><li><strong>beforeMount</strong></li><li><strong>mounted</strong></li><li><strong>beforeUpdate</strong></li><li><strong>updated</strong></li><li><strong>beforeDestroy</strong></li><li><strong>destroyed</strong></li></ul><ol><li><h3 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a><strong>beforeCreate</strong></h3><blockquote><p><strong>实例组件刚创建，元素DOM和数据都还没有初始化，data和mthods里面的数据在这个钩子函数里都拿不到。</strong></p></blockquote></li><li><h3 id="created"><a href="#created" class="headerlink" title="created"></a><strong>created</strong></h3><blockquote><p><strong>数据data已经初始化完成，mthonds也已经可以调用，但是DOM未挂载到页面上。在这里不能进行dom元素的操作，除非利用vm.$nextTick()这个方法是可以等页面中dom全部挂载到页面上就会回调的一个方法，里面就可以进行对dom元素的操作,如果想在created里面操作dom一定记得加钩子函数.</strong></p></blockquote></li><li><h3 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a><strong>beforeMount</strong></h3><blockquote><p><strong>此时已经完成虚拟dom的加载也就是在内存中已经有了虚拟dom树，数据也初始化完成，但是尚未把模板渲染到页面中</strong></p></blockquote></li><li><h3 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a><strong>mounted</strong></h3><blockquote><p><strong>此时已经完成了dom的挂载和渲染这里面已经可以对dom进行操作了，所以一般对dom操作的步骤都应当写在这个钩子函数里面，但是我个人实践发现不管在哪里操作dom只要我操作的这个dom里面有关图片的加载就容易出问题，应为图片的加载比较特俗，一般我想拿到精确的数据我会等图片加载完回调一个图片load事件就可以解决了</strong></p></blockquote></li><li><h3 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a><strong>beforeUpdate</strong></h3><blockquote><p><strong>只要是页面数据改变了都会触发,data里面想更改的数据已经改变了，但是如果页面一直在调用这个数据此时并不会触发vue的响应式，所以页面呈现的还是老的数据，页面上的数据还是旧的。页面尚未和数据同步更新</strong></p></blockquote></li><li><h3 id="updated"><a href="#updated" class="headerlink" title="updated"></a><strong>updated</strong></h3><blockquote><p><strong>只要是页面数据改变了都会触发，数据更新完毕，页面的数据是更新完成的。这里和beforeupdate里面相差的就是这里已经完成了页面的数据和 model数据的同步</strong></p></blockquote></li><li><h3 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a><strong>beforeDestroy</strong></h3><blockquote><p><strong>执行这个钩子函数的时候vue实例就已经从运行阶段进入到销毁阶段，实例身上所有的data和所有的methods以及filter，指令…..都处于可用状态，意义上其实还没有真正执行销毁的过程</strong></p></blockquote></li><li><h3 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a><strong>destroyed</strong></h3><blockquote><p><strong>当执行到这里的时候，实例身上的所有的方法 指令 数据…都已经不可以调用,此时vue实例已经完全销毁了</strong></p></blockquote><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><p><strong>vue生命周期是非常重要的，其中created和mounted是本人经常使用到的两个钩子函数，每个钩子函数执行的时机都不一样，需要认真考虑它们执行的时机及运用，在不同的业务逻辑下运用不同的钩子函数，以上纯属个人理解，有更好的建议可以下面评论或者给我留言，我会努力的改进的哟!</strong></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于js的预解析</title>
      <link href="/2020/04/02/js-zhong-de-yu-jie-xi/"/>
      <url>/2020/04/02/js-zhong-de-yu-jie-xi/</url>
      
        <content type="html"><![CDATA[<ul><li><h2 id="js代码为什么会被预解析"><a href="#js代码为什么会被预解析" class="headerlink" title="js代码为什么会被预解析"></a>js代码为什么会被预解析</h2><ol><li><strong>js代码通过浏览器的 js 解释器（js 引擎） 来执行的</strong></li><li><strong>js 解释器 来执行js 代码分为两步： 首先预解析 再 代码执行</strong></li></ol></li><li><h2 id="预解析的步骤"><a href="#预解析的步骤" class="headerlink" title="预解析的步骤"></a>预解析的步骤</h2><ol><li><strong>首先把函数声明和变量声明，提升到当前作用域最前面。（原因，是因为JS是一个解释执行的脚本语言，从上到下执行。如果函数调用出现在函数定义之前，就会导致失败。）</strong></li><li><strong>变量提升的是声明并不赋值， 函数 只提升声明 并不调用</strong></li><li><strong>变量提升也好函数提升也好都是在自己所处的当前作用域下进行提升</strong></li></ol></li><li><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例:"></a>代码示例:</h2><ol><li><strong>测试1：</strong><pre><code>//测试1function demo1(){console.log(a); var a = 5;}var a = 10;demo1(); //undefined</code></pre></li></ol><strong>最后打印的结果是undefined，这就是js的预解析机制，它并不会去找全局变量a = 10；而是在demo1函数中在当前的函数作用域中提升了变量，也就是预解析机制;</strong><pre><code>//和测试1等价var a;function demo1(){  var a;  console.log(a);   a = 5;} a = 10; demo1(); //undefined</code></pre><ol start="2"><li><strong>测试2：</strong><pre><code>b(); //此时b为变量 //测试2var b = function demo2(){console.log(&#39;demo2&#39;);}</code></pre></li></ol><strong>最后打印的结果是b is not function，这里因为此处的b是函数表达式，被当成变量提升而不是函数声明提升，所以b（）调用这个方法在完成赋值之前是被js解析成一个变量，变量怎么可以被当成方法来调用呢？如果b（）在完成赋值之后那么就会打印demo2如下图代码</strong><pre><code>  //测试2var b = function demo2(){  console.log(&#39;demo2&#39;);}  b(); //此时b为函数</code></pre><ol start="3"><li><strong>测试3：</strong><pre><code>b(); //此时b为函数//测试3var b = 5;function b(){console.log(&#39;demo3&#39;);}</code></pre></li></ol><strong>最后打印的结果是demo3，这里调用b的时候js是把b解析成了下面的函数b，那么疑惑来了函数名和变量名相同，怎么才能确定b到底是变量还是方法呢？我的理解是看b在哪个时候调用，如果b在被赋值之前调用同名的变量和方法那么调用的就是方法，如果是在被赋值之后调用那就是取决你为b赋的值，在这里就是b = 5，代码如下</strong><pre><code>  //测试3  var b = 5;function b(){  console.log(&#39;demo3&#39;);}  b(); //b is not a function   console.log(b); // 当然真实运行的时候不能有上面那条代码不然直接报错卡死在上一条代码也就/不会执行到这里，这里的b是当作了变量所以是可以正常打印的，结果是5</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h2><blockquote><p><strong>js的预解析机制，个人理解就是搞清除被预解析的变量和函数分别是在哪个作用域下，这个一定得分清，还有就是变量和函数同名  调用的到底是什么，这个得看代码的执行时机了。以上纯属个人理解，有更好的建议可以下面评论或者给我留言，我会努力的改进的哟!</strong></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外边距塌陷</title>
      <link href="/2020/04/02/wai-bian-ju-ta-xian/"/>
      <url>/2020/04/02/wai-bian-ju-ta-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="造成外边距塌陷的原因"><a href="#造成外边距塌陷的原因" class="headerlink" title="造成外边距塌陷的原因"></a>造成外边距塌陷的原因</h1><hr><p><strong>根据规范，一个盒子如果使处于普通文档流中而且没有垂直方向补白和垂直方向边框的话，那么它的上边距会和它的文档流中的第一个子元素的上边距重叠。意思就是子元素的margin-top如果找不到父元素的border或者padding，就会与父元素的上边距重叠。左右marggin不会发生外边距合并的现象</strong></p><hr><h1 id="外边距塌陷的代码"><a href="#外边距塌陷的代码" class="headerlink" title="外边距塌陷的代码:"></a>外边距塌陷的代码:</h1><pre><code>  &lt;div class=&quot;father&quot;&gt;    &lt;div class=&quot;children&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;!-- 样式部分 --&gt;.father {            width: 500px;            height: 200px;            margin-top: 10px;            background-color: green;        }.children {            margin-top: 20px;            background-color: red;        }</code></pre><p><strong>上述代码运行以后childern的外边距按理说应该是30px，但是实际上却是20px,这就是典型垂直方向上的外边距合并,那么要怎么解决这种状况呢</strong></p><h2 id="我知道的解决方法有这五种"><a href="#我知道的解决方法有这五种" class="headerlink" title="我知道的解决方法有这五种"></a>我知道的解决方法有这五种</h2><ol><li><strong>给父元素father 加上overflow：hidden属性</strong><pre><code>.father {         width: 500px;         height: 200px;         margin-top: 10px;         overflow: hidden; //添加这个属性使父节点形成BFC模式         background-color: green;     }.children {         margin-top: 20px;         background-color: red;     }</code></pre></li><li><strong>给父元素father 加上垂直方向的padding：value</strong><pre><code>.father {         width: 500px;         height: 200px;         margin-top: 10px;         padding-top: 5px; //添加这个属性使父节点形成BFC模式         background-color: green;     }.children {         margin-top: 20px;         background-color: red;     }</code></pre></li><li><strong>给父元素father 加上垂直方向的border</strong><pre><code>.father {         width: 500px;         height: 200px;         margin-top: 10px;         border: 1px solid transparent; //添加这个属性使父节点形成BFC模式         background-color: green;     }.children {         margin-top: 20px;         background-color: red;     }</code></pre></li><li><strong>给父元素father 加上float</strong><pre><code>.father {         width: 500px;         height: 200px;         margin-top: 10px;         float:left //这里只要不为none即可,添加这个属性使父节点形成BFC模式         background-color: green;     }.children {         margin-top: 20px;         background-color: red;     }</code></pre></li><li><strong>给父元素father 加上position:absolute</strong><pre><code>.father {         width: 500px;         height: 200px;         margin-top: 10px;         position:absolute //添加这个属性使父节点形成BFC模式         background-color: green;     }.children {         margin-top: 20px;         background-color: red;     }</code></pre><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><blockquote><p><strong>外边距塌陷是很容易发生的，刚开始我遇到的时候也是非常的抓狂，margin发生了不在预料之中的状况，一定要稳住心态，踩过的坑越多，成长的才会更快!一起加油，少年！以上纯属个人理解，有更好的建议可以下面评论或者给我留言，我会努力的改进的哟!</strong></p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 页面 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
